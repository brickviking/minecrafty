#!/bin/bash
# 0.0: Initial three-liner, set gamma to 0.6, run minecraft, put gamma back.
# 0.1: wrap things a bit
# 0.2: add in switches -launcher, -server181
# 0.3: Add functions for help, RunMe, change switches to short form -s/-l
# 0.4: put in host detection, so CRT outputs get detected on a per-host basis.
# 0.5: Add in -g (gamma) switch, the -d (default) switch, and do switch parsing. Some of this came from RfcShow.
# 0.6: Add in function to find current gamma setting, needs work
# 0.7: Got rid of GetGamma, as it ended up as a one-liner.
# 0.8: Possible reinstatement as FetchGamma/GammaExit wrappers around $CMD
# 0.9: Split off gamma setting into its own routine. Should we getopt this program?
# 0.10: adding a -t (tiny) switch (takes up less memory) and an -e (enormous) switch
#       Also tweaked RunMe to RunMC
# 0.11: reset gamma somewhat so it only fires up if we specify a gamma 
# 0.12: Tidied up comments, commented out a host-specific section
# 0.13: Initial try at hacking in server support, change the s parameter to accept a filename
#     : This would (of course) fail in the case of an empty -g AND -s (whether empty or not)
#     : or vice versa: empty -s with -g parameter.
#     : Other problems apply if I specify -s at all, I won't need -l or -g anyhow
# 0.14: I need to add a correction for gamma at exit of mc.
# 0.15: Added another launcher to the list of launchers I can execute (SKMCLauncher, by sk89q)
#     : added help line for SKMC, tweaked help to say where launchers needed to be)
# 0.16: added -m option to select which monitor I want gamma raised on.
#     : Only problem with this, is it's often different from the monitor I need to correct refresh on.
# 0.16a: added lines to Help describing -c
# 0.16b: changed -c to -r (refreshrate)
# 0.17: added an array to populate ${GETOPTS} with, so I can keep Help() and ParseOpts() in sync.
#     : ParseOpts isn't made yet.
# 0.18: Complete rewrite of options parsing. Well on the way to being actually FINISHED!
#     : GammaExit renamed as ResetGamma, I should rename RefreshExit too.
# 0.19: All done, I hope. One buglet found so far, order of options matters for -m and -g
#     : Now executing SetGamma from RunMC. Only the one bugette left, skmclauncher exits and relaunches,
#     : so the ResetGamma happens when it shouldn't happen until the script ends. Refresh rate's not getting reset.
# 0.20: Fixed the order of -g/-m so it doesn't matter.
#     : realised that BOTH monitors are getting their refresh rate resynched to "Preferred"
#     : In addition, if I choose to reset monitors independently, I'm going to have an interesting problem separating
#     : their framerates and gammas from each other. I've also discovered a "brightness" setting.
#     : Rejiggered three of the switches so I can reuse their lowercase variants as separate switches

VERSION=0
MINOR=20
PATCH=
ME=$(basename $0)
# Default gamma brightness of game
GAMMADEF=0.6
# Default memory assign (whatever the java executable assigns)
MEM=" "
# set this to blank too
CMDOPT=" "
# TODO: Fix the pulseaudio dependency
#CMDRUN="padsp java"
CMDRUN="java"

# Mandatory to declare an associative array
declare -A FUNCARRAY

# New array for filling GETOPTS
GOA=(
"B" "assign more memory to the client" SetMoreMemory
"E" "assign lots more memory to the client" SetEnormousMemory
"T" "assign minimal memory to the client" SetTinyMemory
"b:" "n.n: set the brightness. If unset, $BRIGHTDEF is used. 0.7 darker, 1.2 lighter" BrightInit
"h" "provides this help screen" Help
"l" "starts the digiex mclauncher program (must be in $(dirname $0))" SetDigiLauncher
"o" "starts the SKMClauncher program (must be in $(dirname $0))" SetSKMCLauncher
"v" "show version string" ShowVersionString
"g:" "n.n: set the gamma offset. If unset, $GAMMADEF is used. 0.7 lighter, 1.2 darker" GammaInit
"m:" "select monitor to apply gamma correction to" SetMonitor
"r:" "nn.n: set a valid refresh rate for the second monitor, as minecraft has a habit of setting this to the recommended value instead of the value used originally." SetRefresh
)

# Entries that aren't used at the moment
GONA=(
"s:" "starts the latest server, supply a filename" StartServer
)

# This routine "stuffs" values into GETOPTS for later use by the getopts routine
StuffGetOpts() {
# Apparently bash now supports ( [string]="value" ) arrays.
	for (( i=0, p=0; i< ${#GOA[@]}; i+=3, p++ )); do
		GETOPTARRAY+=( "${GOA[i]}" )
		GETOPTS="${GETOPTS}${GOA[i]}"
		HELPOPTS+=( "${GOA[i+1]}" )
		FUNCARRAY+=( ["${GETOPTARRAY[p]}"]="${GOA[i+2]}" )
	done

}

Help() {
	echo "$0: Help screen"
	echo "$0 -${GETOPTS}"
	for (( i=0, p=0; p<${#GETOPTARRAY[@]}; i+=3, p++ )); do
		echo "-${GETOPTARRAY[p]}:    ${GOA[i+1]}"
	done
	unset CMD
	break
}

StartServer() {
	ServerRun $1
}

GammaInit() {
	if [[ -z $MON ]]; then MON=0; fi # set a default if one hasn't been set already
	if [[ ${1} == ${1//[^[:digit:]\.]/} ]]; then
		if [[ ! $GAMMA ]]; then # Only set if it hasn't already been
			GAMMA=${1:-${GAMMADEF}}  # This looks good for my screen, might not be useful for anyone else
		else
			echo "Gamma has been set to $GAMMA already, ignoring $1"
		fi
	else
# Could get tangled up with next -belts: parameter if g is empty
	    echo "I can't set your gamma to ${1}!"
		echo "You need to provide a number for -g (0.7, .7, 1.0)"
	fi
}

FetchGamma() {
# TODO: I should put xrandr output into a var, as it's used multiple places
# This routine fetches available outputs that are plugged in
	GARRAY=( $(xrandr --verbose | awk 'NR == 1 { next }; match($0, /^[[:alnum:]\-]+/) { output = substr($0,RSTART, RLENGTH) }; /Gamma:/ { print output, $2 }') )
}

# This is meant to fetch the Refresh rates for each connected screen
FetchRefresh() {
# No idea what to tack onto the end, except that I need to look for Connected,
# then Current, and two lines after, the refresh rate that I need.
# I have to create entries for (possibly multiple) screens
	#
  RARRAY=( $(xrandr --verbose ) )
}

ResetGamma() {
# TODO: Remove host dependency, pretty hard to do without having X involved anyhow.
# Now we put the brightness back to normal, on the first screen
	GAMMA=${GARRAY[$MON+1]}
#	xrandr --output ${GARRAY[$MON]} --gamma ${GARRAY[$MON+1]}
	SetGamma # Might as well reuse the same function.
}

ResetRefresh() {
#   if [[ ${GARRAY[2]} && $HOSTNAME == fatty ]]; then
#    xrandr --output ${GARRAY[$MON]} --rate ${Refresh} --mode 1024x768
# The game had a habit of resetting the other screen to 60Hz. Not nice. Only set on fatty for now
    xrandr --output ${GARRAY[2]} --rate ${Refresh} --mode 1024x768
#    fi
}

SetGamma() {
# This'll brighten/darken things a bit - only thing that needs changing will be the output
# which comes from $MON
	xrandr --output ${GARRAY[${MON}]} --gamma "${GAMMA}:${GAMMA}:${GAMMA}"
}

# Central one shot run engine.
RunMC() {
# TODO: make this not so $HOME-centric
	pushd $HOME/bin

	if [[ ${GAMMA} ]]; then
		SetGamma $GAMMA
	fi
# Run the command we got earlier, finishing by peeling the return value
	${CMD}
	retval=$?
	popd
}

ServerRun() {
# Wrap with DoesFileExist for ${OPTARG}, don't forget the empty case.
    case $1 in ''|"-*")
# Trying to be clever here and eliminate empty -s followed by another option
		ServerName=minecraft_server.jar
		;;
	"*")
		ServerName="${1}.jar"
		;;
    esac
	if [[ -f ${ServerName} ]]; then
		CMD="java -Xmx1024M -Xms1024M -jar ${ServerName}"
	else
		echo "We don't have the $1 server ${ServerName} here, please download from www.minecraft.net"
		retval=1 #bad doggie, bad
	fi
}

DefaultSettings() {
		CMDARG="-cp minecraft.jar net.minecraft.LauncherFrame"
		CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
	    FetchGamma
		StuffGetOpts
}

SetEnormousMemory() {
	MEM="-Xmx2048M -Xms1024M"
	CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

SetMoreMemory() {
	MEM="-Xmx1024M -Xms1024M"
	CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

SetTinyMemory() {
	MEM="-Xmx512M -Xms512M"
	CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

SetMonitor() {
# TODO: correctly apply this to -g
	MON=$(( $1 * 2 )) #MonitorOffset
#	if ${GAMMA} set, then rerun SetGamma
	if [[ ${GAMMA} ]]; then 
		SetGamma
	fi
}

ShowVersionString() {
	echo "$ME: ${VERSION}.${MINOR}.${PATCH}"
	unset CMD
# We need to exit
	break 
}

SetDigiLauncher() {
# runs mclauncher
	CMDRUN="padsp java -Xincgc"
	CMDARG="-jar mclauncher.jar"
	CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

SetSKMCLauncher() {
# runs SKMClauncher
	CMDRUN="padsp java -Xincgc"
	CMDARG="-jar SKMCLauncher.jar"
	CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

SetRefresh() {
	Refresh=$1
}

GetOpts() {
	while getopts ${GETOPTS} MYVAR; do
		for (( t=0; t<"${#GETOPTARRAY[@]}"; t++ )); do
			if [[ "${MYVAR}:" == "${GETOPTARRAY[$t]}" ]]; then 
				MYVAR="${MYVAR}:"
			fi
		done
		${FUNCARRAY[$MYVAR]} ${OPTARG}
	done
}

DefaultSettings
GetOpts $@

if [[ ${CMD+defined} ]]; then
  RunMC
  if [[ ${GAMMA} ]]; then
    ResetGamma
  fi
  if [[ ${Refresh} ]]; then
    ResetRefresh
  fi
fi
exit $retval

