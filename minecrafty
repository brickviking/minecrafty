#!/bin/bash
# 0.0: Initial three-liner, set gamma to 0.6, run minecraft, put gamma back.
# 0.1: wrap things a bit
# 0.2: add in switches -launcher, -server181
# 0.3: Add functions for help, RunMe, change switches to short form -s/-l
# 0.4: put in host detection, so CRT outputs get detected on a per-host basis.
# 0.5: Add in -g (gamma) switch, the -d (default) switch, and do switch parsing. Some of this came from RfcShow.
# 0.6: Add in function to find current gamma setting, needs work
# 0.7: Got rid of GetGamma, as it ended up as a one-liner.
# 0.8: Possible reinstatement as FetchGamma/GammaExit wrappers around $CMD
# 0.9: Split off gamma setting into its own routine. Should we getopt this program?
# 0.10: adding a -t (tiny) switch (takes up less memory) and an -e (enormous) switch
#       Also tweaked RunMe to RunMC
# 0.11: reset gamma somewhat so it only fires up if we specify a gamma 
# 0.12: Tidied up comments, commented out a host-specific section
# 0.13: Initial try at hacking in server support, change the s parameter to accept a filename
#     : This would (of course) fail in the case of an empty -g AND -s (whether empty or not)
#     : or vice versa: empty -s with -g parameter.
#     : Other problems apply if I specify -s at all, I won't need -l or -g anyhow
# 0.14: I need to add a correction for gamma at exit of mc.
# 0.15: Added another launcher to the list of launchers I can execute (SKMCLauncher, by sk89q)
#     : added help line for SKMC, tweaked help to say where launchers needed to be)
# 0.16: added option to select which monitor I want gamma raised on.
# 0.16a: added lines to Help describing -c

VERSION=0
MINOR=16
PATCH=a
ME=$(basename $0)
GAMMADEF=0.6  # Default gamma brightness of game
# Default memory assign (whatever the java executable assigns)
MEM=" "
# set this to blank too
CMDOPT=" "
#CMDRUN="padsp java"
CMDRUN="java"
GETOPTS="bc:eg:hlm:os:t"

# Gee. What can I say?
Help() {
	# About the only thing I'm missing is a graphical component to this
	echo "${ME}: ${ME} [-h]"
	echo "${ME} -h provides this help screen"
	echo "${ME}: ${ME} [-l|-c nn[.n]|-e|-b|-t|-g n[.n]|-s [filename]]"
	echo "    nothing:  use the default launcher"
	echo "    -s:  starts the latest server, supply a filename"
	echo "      :  if you don't want to use minecraft_server.jar"
	echo "    -l:  starts the mclauncher program (must be in $(dirname $0))"
	echo "    -o:  starts the SKMClauncher program (must be in $(dirname $0))"
	echo "    -e:  assign lots more memory to the client"
	echo "    -b:  assign more memory to the client"
	echo "    -t:  assign minimal memory to the client"
	echo "    -g n.n: set the gamma offset. If unset, $GAMMADEF is used."
	echo "      :  Less than 1.0 = brighter, more than 1.0 = darker"
	echo "    -c nn.n: set a valid refresh rate for the second monitor, as minecraft has a"
	echo "      :  habit of setting this to the recommended value instead of the value used originally."
	echo "    anything else (including nothing at all) starts the conventional launcher"
	retval=0
}

FetchGamma() {
	# TODO: I should put xrandr output into a var, as it's used multiple places
	# This routine fetches available outputs that are plugged in
	GARRAY=( $(xrandr --verbose | awk 'NR == 1 { next }; match($0, /^[[:alnum:]\-]+/) { output = substr($0,RSTART, RLENGTH) }; /Gamma:/ { print output, $2 }') )
}

# This is meant to fetch the Refresh rates for each connected screen
FetchRefresh() {
	# No idea what to tack onto the end, except that I need to look for Connected,
	# then Current, and two lines after, the refresh rate that I need.
	# I have to create entries for (possibly multiple) screens
	#
  RARRAY=( $(xrandr --verbose ) )
}

GammaExit() { # TODO: Remove host dependency, pretty hard to do without having X involved anyhow.
	# Now we put the brightness back to normal, on the first screen
	xrandr --output ${GARRAY[0]} --gamma ${GARRAY[1]}
}

CorrectRefresh() {
# The game had a habit of resetting the other screen to 60Hz. Not nice. Only set on fatty for now
    if [[ ${GARRAY[2]} && $HOSTNAME == fatty ]]; then
        xrandr --output ${GARRAY[2]} --rate ${Refresh} --mode 1024x768
    fi
}

SetGamma() {
	if [[ ${1} == ${1//[^[:digit:]\.]/} ]]; then
		if [[ ! $GAMMA ]]; then # Only set if it hasn't already been
			GAMMA=${1:-${GAMMADEF}}  # This looks good for my screen, might not be useful for anyone else
		fi
	else
	# Could get tangled up with next -belts: parameter if g is empty
	    echo "I can't set your gamma to ${1}!"
		echo "You need to provide a number for -g (0.7, .7, 1.0)"
	fi
	# Grab next param in line, use it for the gamma
}

GammaRun() {
	# TODO: Specifically breaks on the case of -g -g n.n (repeating the -g switch)
	if [[ ! $GAMMA ]]; then
		SetGamma ${@}  # grab what's now at $1, set it as the new gamma value
		# TODO: check $1 is a number, or even that it's set.
		# TODO: offset by monitor number
	else
		echo "Gamma has been set to $GAMMA already, ignoring $1"
	fi
	# This'll brighten/darken things a bit - only thing that needs changing will be the output
	xrandr --output ${GARRAY[0]} --gamma "${GAMMA}:${GAMMA}:${GAMMA}"
}

# Central one shot run engine.
RunMC() {
	pushd $HOME/bin
	# Run the command we got earlier, finishing by peeling the return value
	${CMD}
	retval=$?
	popd
}

ServerRun() {
	# Wrap with DoesFileExist for ${OPTARG}, don't forget the empty case.
    case $1 in ''|"-*") # Trying to be clever here and eliminate empty -s followed by another option
		ServerName=minecraft_server.jar
		;;
	"*")
		ServerName="${1}.jar"
		;;
    esac
	if [[ -f ${ServerName} ]]; then
		CMD="java -Xmx1024M -Xms1024M -jar ${ServerName}"
	else
		echo "We don't have the $1 server ${ServerName} here, please download from www.minecraft.net"
		retval=1 #bad doggie, bad
	fi
}

Default() {
	# TODO: Fix the pulseaudio dependency
#		CMD="padsp java -Xmx1024M -Xms1024M -cp minecraft.jar net.minecraft.LauncherFrame"
		CMDRUN="padsp java"
		CMDARG="-cp minecraft.jar net.minecraft.LauncherFrame"
		CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
	    FetchGamma
}

Default
while getopts ${GETOPTS} MYVAR; do
	# TODO: I never errorcheck here, oops.
	case "$MYVAR" in 
		"h") Help
			unset CMD
			break # We need to exit
		;;
		"v") echo "$ME: ${VERSION}.${MINOR}"
			unset CMD
			break # We need to exit
		;;
	# Let's deal with -s first, as it means we won't need -l or -g
		"s") ServerRun ${OPTARG}
		;;
		"r") Refresh=${OPTARG}
			;;
		"l")
	# runs mclauncher
		CMDRUN="padsp java -Xincgc"
		CMDARG="-jar mclauncher.jar"
		CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
		;;
		"o")
	# runs SKMClauncher
		CMDRUN="padsp java -Xincgc"
		CMDARG="-jar SKMCLauncher.jar"
		CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
		;;
		# TODO: For these three options, it's safer to reset CMD rather than expecting it to be set already
		"e") MEM="-Xmx2048M -Xms1024M" # (Enormous)
		CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
			;;
		"b") MEM="-Xmx1024M -Xms1024M" # (Big)
		CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
			;;
		"t") MEM="-Xmx512M -Xms512M" # (Tiny)
		CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
			;;
		"g") GammaRun ${OPTARG}
		;;
#		"d")
#			Default
#		;;
	esac
done
if [[ ${CMD+defined} ]]; then
  RunMC
  if [[ ${GAMMA} ]]; then
    GammaExit
  fi
  if [[ ${Refresh} ]]; then
    CorrectRefresh
  fi
fi
exit $retval

