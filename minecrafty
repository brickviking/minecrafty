#!/bin/bash

VERSION=0
MINOR=58
PATCH=
ME=$(basename $0)
# Default gamma brightness of game
GAMMADEF=1.0
# Rabbit
RESOLUTION=1920x1080
MYRES=
# Default memory assign (whatever the java executable assigns)
MEM=""
# set this to blank too
CMDOPT=" "
# Set this to your favourite java location, whether openjdk or oracle
JAVARUN="java"
CMDRUN="$JAVARUN"
# Mandatory
MCBase="${HOME}/.minecraft"
# Set the logfile to empty string initially
OUTFILE=""
# Optional, if you add launchers, set a path here, add a SetXyzLauncher() function, add a line to ${FOA} and ${LOA} and a stanza in FetchMinecraft()
CLBase="${HOME}/.craftland"
FTBBase="${HOME}/FTB.minecraft"
TechnicBase="${HOME}/.technic"
TerraFirmaBase="${HOME}/.tfcraft"
ATLauncherBase="${HOME}/ATLauncher"
AetherLauncherBase="${HOME}/.aether_launcher"

# Mandatory to declare an associative array
declare -A FUNCARRAY
declare -A CMDARRAY

# New array for filling GETOPTS
GOA=(
"h" Help "provides this help screen (-? gets here as well)"
"v" ShowVersionString "show version string"
"G" LogFile "Capture output into a log file"
"T" SetTinyMemory "assign minimal memory to the client (256 Mb)"
"S" SetSmallMemory "assign normal amount of memory to the client (512 Mb)"
"B" SetMoreMemory "assign more memory to the client (1 Gb)"
"E" SetEnormousMemory "assign lots more memory to the client, only on 64-bit systems (2 Gb)"
"O" SetPADSP "create OSS-like pulseaudio device"
"P" SetPAPause "suspends pulseaudio while minecraft runs"
"b:" BrightInit "n.n: set the brightness. If unset, $BRIGHTDEF is used. 0.7 darker, 1.2 lighter"
"g:" GammaInit "n.n: set the gamma offset. If unset, $GAMMADEF is used. 0.7 lighter, 1.2 darker"
"m:" SetMonitor "select monitor to apply gamma correction to"
"r:" SetRefresh "nn.n: set a valid refresh rate for the second monitor, as minecraft has a habit of setting this to the recommended value instead of the value used originally."
"z:" FetchResolution "XxY: set required resolution (1920x1080 default)"
"f:" FetchMinecraft "retrieves minecraft.jar or launcher from remote host, \`-f help' for more details"
"l:" Launcher "starts specified launcher, \`-l help' for more details"
"s:" ServerRun "starts the latest server from \`${MCBase}/server', supply a filename"
)

# Entries that aren't used at the moment, they're obsolete, I think.
GONA=(
)

# Entries for the -f (fetch) switch
FOA=(
"help" FetchHelp "provide this help screen specifically for version and launcher downloading"
"1.2.4" VersionCheck "download a specific final-release version"
"13w02b" VersionCheck "download a specific snapshot version"
"launcher" Fetch "download default launcher"
"default" Fetch "download default launcher"
"vanilla" Fetch "download default launcher"
"craft" Fetch "download Craftland installer for latest Aether prerelease"
"digiex" Fetch "download DigiEX launcher (obsolete, may not work)"
"ftb" Fetch "download FTB launcher"
"magic" Fetch "download MagicLauncher"
"skmc" Fetch "download development version of SKMCLauncher.jar (obsolete, may not work)"
"technic" Fetch "download beta Technic launcher"
"terra" Fetch "download beta TerraFirmaCraft launcher (1.5.1 only)"
"mvc" Fetch "download Minecraft Version Changer from TunkDesign"
"bukkitrb" Fetch "download latest recommended bukkit build"
"atl" Fetch "download AT Launcher for Linux"
"aether" Fetch "download classic Aether Launcher"
)

# Unused -f entries
FONA=(
"bukkitdevel" Fetch "download absolutely latest bukkit"
"devlauncher" Fetch "download development launcher"
"multi" Fetch "download MultiMC"
)
# I could also have entry for spigot in there

# Entries for the -l (launcher) switch
LOA=(
"help" LaunchHelp "provide this screen specifically for launcher (-l) help"
"default" DefaultSettings "run default launcher"
"launcher" DefaultSettings "run default launcher"
"vanilla" DefaultSettings "run default launcher"
"craft" SetCraftLauncher "run CraftLand launcher"
"digiex" SetDigiLauncher "run DigiEX launcher"
"magic" SetMagicLauncher "run MagicLauncher"
"multi" SetMultiLauncher "run MultiMC"
"skmc" SetSKMCLauncher "run development version of SKMCLauncher.jar"
"ftb" SetFTBLauncher "run FTB launcher"
"technic" SetTechLauncher "run Technic launcher"
"terra" SetTerraLauncher "run beta TerraFirmaCraft launcher (1.5.1 only)"
"mvc" SetMVCLauncher "run Minecraft Version Changer (MVC.jar)"
"atl" SetATLauncher "run AT Launcher"
"aether" SetAetherLauncher "run classic Aether Launcher"
)


# Unused -l entries
LONA=(
# devlauncher was rendered totally irrelevant when it became the default launcher
#"devlauncher" SetDevLauncher "run Mojang's development launcher"
)

# This routine "stuffs" values into GETOPTS for later use by the getopts routine
StuffGetOpts() {
# Apparently bash now supports ( [string]="value" ) arrays.
    for (( i=0, p=0; i< ${#GOA[@]}; i+=3, p++ )); do
        GETOPTARRAY+=( "${GOA[i]}" )
        GETOPTS="${GETOPTS}${GOA[i]}"
        FUNCARRAY+=( ["${GETOPTARRAY[p]}"]="${GOA[i+1]}" )
        HELPOPTS+=( "${GOA[i+2]}" )
    done

}

StuffLaunchOpts() {
# Apparently bash now supports ( [string]="value" ) arrays.
    for (( i=0, p=0; i< ${#LOA[@]}; i+=3, p++ )); do
        LAUNCHOPTARRAY+=( "${LOA[i]}" )
        LAUNCHOPTS="${LAUNCHOPTS}${LOA[i]}"
        FUNCARRAY+=( ["${LAUNCHOPTARRAY[p]}"]="${LOA[i+1]}" )
        LAUNCHHELPOPTS+=( "${LOA[i+2]}" )
    done

}

StuffFetchOpts() { #Set this up for launchers
# Apparently bash now supports ( [string]="value" ) arrays.
    for (( i=0, p=0; i< ${#FOA[@]}; i+=3, p++ )); do
        FETCHOPTARRAY+=( "${FOA[i]}" )
        FETCHOPTS="${FETCHOPTS}${FOA[i]}"
        FUNCARRAY+=( ["${FETCHOPTARRAY[p]}"]="${FOA[i+1]}" )
        FETCHHELPOPTS+=( "${FOA[i+2]}" )
    done

}

Help() {
    echo "$ME: Help screen"
    echo "$ME -${GETOPTS}"
    for (( i=0, p=0; p<${#GETOPTARRAY[@]}; i+=3, p++ )); do
        echo "-${GETOPTARRAY[p]}    ${GOA[i+2]}"
    done
}

LaunchHelp() {
    LOTA="${LAUNCHOPTARRAY[0]}"
    for (( i=3, p=1; p<${#LAUNCHOPTARRAY[@]}; i+=3, p++ )); do
        LOTA+="|${LAUNCHOPTARRAY[p]}"
    done
    echo "$ME -l [${LOTA}]"
    for (( i=0, p=0; p<${#LAUNCHOPTARRAY[@]}; i+=3, p++ )); do
        echo "-l ${LAUNCHOPTARRAY[p]}    ${LOA[i+2]}"
    done
}

FetchHelp() {
    FOTA="${FETCHOPTARRAY[0]}"
    for (( i=3, p=1; p<${#FETCHOPTARRAY[@]}; i+=3, p++ )); do
        FOTA+="|${FETCHOPTARRAY[p]}"
    done
    echo "$ME -f [${FOTA}]"
    for (( i=0, p=0; p<${#FETCHOPTARRAY[@]}; i+=3, p++ )); do
        echo "-f ${FETCHOPTARRAY[p]}    ${FOA[i+2]}"
    done
}

LogFile() {
# Set output file for stdout/stderr to minecrafty.output.txt
# WARNING: this should be the last option processed
OUTFILE="${MCBase}/minecrafty.output.txt"
}

# Hopefully sets brightness, separate from the gamma
BrightInit() {
    if [[ -z $MON ]]; then MON=0; fi # set a default if one hasn't been set already
    if [[ ${1} == ${1//[^[:digit:]\.]/} ]]; then
        if [[ ! $BRIGHT ]]; then # Only set if it hasn't already been
            BRIGHT=${1:-${BRIGHTDEF}}
        else
            echo "Brightness has been set to $BRIGHT already, ignoring $1"
        fi
    else
# Could get tangled up with next -belts: parameter if g is empty
        echo "I can't set brightness to ${1}! Try using a number such as 0.7, .7 or 1"
    fi
}

FetchBright() {
# TODO: I should put xrandr output into a var, as it's used multiple places
# This routine fetches available outputs that are plugged in
    BARRAY=( $(xrandr --verbose | awk 'NR == 1 { next }; match($0, /^[[:alnum:]\-]+/) { output = substr($0,RSTART, RLENGTH) }; /Brightness:/ { print output, $2 }') )
}

# This'll brighten/darken things a bit - only thing that needs changing will be the output monitor
SetBright() {
    xrandr --output ${BARRAY[${MON}]} --brightness "${BRIGHT}"
}

ResetBright() {
# TODO: Remove host dependency, pretty hard to do without having X involved anyhow.
# Now we put the brightness back to normal, on the first screen
    BRIGHT=${BARRAY[$MON+1]}
#    xrandr --output ${BARRAY[$MON]} --brightness ${BARRAY[$MON+1]}
    SetBright # Might as well reuse the same function.
}

GammaInit() {
    if [[ -z $MON ]]; then MON=0; fi # set a default if one hasn't been set already
    if [[ ${1} == ${1//[^[:digit:]\.]/} ]]; then
        if [[ ! $GAMMA ]]; then # Only set if it hasn't already been
            GAMMA=${1:-${GAMMADEF}}
        else
            echo "Gamma has been set to $GAMMA already, ignoring $1"
        fi
    else
# Could get tangled up with next -belts: parameter if g is empty
        echo "I can't set your gamma to ${1}! Try using a number such as 0.7, .7 or 1"
    fi
}

FetchGamma() {
# TODO: I should put xrandr output into a var, as it's used multiple places
# This routine fetches available outputs that are plugged in
    GARRAY=( $(xrandr --verbose | awk 'NR == 1 { next }; match($0, /^[[:alnum:]\-]+/) { output = substr($0,RSTART, RLENGTH) }; /Gamma:/ { print output, $2 }') )
}

# This is meant to fetch the Refresh rates for each connected screen
FetchRefresh() {
# No idea what to tack onto the end, except that I need to look for Connected,
# then Current, and two lines after, the refresh rate that I need.
# I have to create entries for (possibly multiple) screens
    #
  RARRAY=( $(xrandr --verbose ) )
}

FetchResolution() {
# This routine fetches the default resolution at the time of first running the program
# TODO: what if we have multiple screens? A virtual desktop of a different size?
# RES=$(xdpyinfo | grep dimension | egrep -o "[[:digit:]]{3,4}x[[:digit:]]{3,4}" | head -n 1)
read RES < <(xdpyinfo | sed -rn 's/.*dimension.* ([0-9]+x[0-9]+).*/\1/p')
# Better feed the BARRAY, as it holds my available monitors
FetchBright
# TODO: Please PLEASE find out how to sanity check this one
MYRES=${1}
}

ResetResolution() {
# Now we put the resolution back to normal, a call to SetResolution with desired RESOLUTION
# TODO: what about multiple screens?
MYRES=${RES}
xrandr --output ${BARRAY[${MON}]} --mode ${MYRES}
}

SetResolution() {
# Just like it says on the tin, sir
# Only change if there's a reason to do so
# TODO: Figure out what $MON is supposed to be
if [[ ${RES} != ${MYRES} ]]; then
    if [[ ${BARRAY} ]]; then
# WARNING: Ouch, multiple monitors???
        xrandr --output ${BARRAY[${MON}]} --mode ${MYRES}
    else
        xrandr --output ${MON} --mode ${MYRES}
    fi
else
    unset MYRES # means we don't reset it later
fi
}

ResetGamma() {
# TODO: Remove host dependency, pretty hard to do without having X involved anyhow.
# Now we put the brightness back to normal, on the first screen
    GAMMA=${GARRAY[$MON+1]}
echo "Inside ResetGamma, with ${GAMMA}"
#    xrandr --output ${GARRAY[$MON]} --gamma ${GARRAY[$MON+1]}
    SetGamma # Might as well reuse the same function.
}

ResetRefresh() {
# TODO: It seems if the gamma never got loaded, then this function always fails
# The game had a habit of resetting the other screen to 60Hz. Not nice.
# TODO: we really should leave things as we found them and reset mode to what it was.
    xrandr --output ${GARRAY[2]} --rate ${Refresh} --mode 1024x768
#    fi
}

# This'll brighten/darken things a bit - only thing that needs changing will be the output monitor
SetGamma() {
    xrandr --output ${GARRAY[${MON}]} --gamma "${GAMMA}:${GAMMA}:${GAMMA}"
}

# Central one shot run engine.
RunMC() {
# TODO: merge these if they're both set.
    if [[ -n "${MYDIR}" ]]; then
        pushd "${MYDIR}"
    else
        pushd "${MCBase}"
    fi

    if [[ ${GAMMA} ]]; then
# We already did GammaInit
        FetchGamma
        SetGamma $GAMMA
    fi
    if [[ ${BRIGHT} ]]; then
# We already did BrightInit
        FetchBright
        SetBright $BRIGHT
    fi
    if [[ ${MYRES} ]]; then
        SetResolution
    fi
# Run the command we got earlier, finishing by peeling the return value
    if [[ -z "${OUTFILE}" ]]; then
      ${CMD}
    else
# Run the command we got earlier, outputting the command through tee.
# return value will be from tee
      ${CMD} 2>&1 | tee ${OUTFILE}
    fi
    retval=$?
    popd
}

ServerRun() {
# TODO: add the new server location of .minecraft/server/whatever.jar
# Wrap with DoesFileExist for ${OPTARG}, don't forget the empty case.
    if [[ ${1} == "default" ]]; then
        ServerName=minecraft_server.jar
    else
        ServerName=${1}
    fi

    ServerPlace="${MCBase}/server"
    echo "ServerName now set to ${ServerName}"
    if [[ -f ${ServerPlace}/${ServerName} ]]; then
        # TODO: how do we decide if server requires any more memory?
        CMD="$JAVARUN -Xmx1024M -Xincgc -jar ${ServerPlace}/${ServerName}"
    else
        echo "We don't have the $1 server here, please download from www.minecraft.net, getbukkit.org or spigotmc.org"
#        echo "I can fetch default server versions, $0 -f 1.7.10 (example) will fetch client and server together"
        retval=1 #bad doggie, bad, there's no point in continuing any further
        echo "Instead, here's a default launcher"
    fi
}

# designed to assign CMD the correct launcher
Launcher() {
    if [[ "$1" == "?" ]]; then
      LaunchHelp
      unset CMD
      retval=1
      return
    fi
    if [[ ${CMDARRAY[$1]+set} ]]; then
        case $1 in 
        help) LaunchHelp
            unset CMD
            ;;
        *)
            ${CMDARRAY[$1]}
            ;;
        esac
    else
        # This starts default launcher if there's no $1 launcher
        echo "We haven't got a launcher called $1 yet"
        retval=1
    fi
}

# Hopefully, pull down the RSS feed and peel the top entry
ParseLatestRB() {
    wget -O ${MCBase}/server/text http://dl.bukkit.org/downloads/craftbukkit/feeds/latest-rb.rss
    # grovel through the file looking for something, peel the numbers
    BUKKITVER=$(grep -h -m1 "<item><title>Recommended Build for CraftBukkit: " ${MCBase}/server/text | cut -c522-531 )
}

ParseLatestBeta() {
    wget -O ${MCBase}/server/text http://dl.bukkit.org/downloads/craftbukkit/feeds/latest-rb.rss
    # grovel through the file looking for something, peel the numbers
    beefjerky=$(grep -h -m1 ${MCBase}/server/text "<item><title>Recommended Build for CraftBukkit: ")
}

FetchMinecraft() {
    # Pulled this in from fetchminecraft.sh at version 0.1.9
    # ver 0.0.0: initial cut
    # 0.0.1: finally got the script fetching the client and server
    #      : now I just need to toggle -c/-s for fetching just the client or server
    # 0.0.2: checked if we succeeded in fetching the file
    # 0.0.3: split off the two patterns, as they create two slightly different names
    #      : i.e.  final_$VER or snapshot_$VER.  Also shifted the initial cd outside the case switch.
    # 0.1.1: no idea why I upgraded to this number, but hey.
    # 0.1.9: folded this directly into minecrafty, also added another two years of snapshots
    # 0.2.0: modified newfetch pattern to cover up to 1.99.99
    # ==========================================
    # NB: this functionality has been (mostly) superceded by the new vanilla launcher's fetching client versions
    # ==========================================
    # NB: Should we have a "fetch server" switch? Currently we fetch both.

    # $1 ought to be something like 12w32a or 1.3.2, as it'll get used to name save files.
    unset CMD # we need to unset this, so that we don't accidentally start minecraft

    # ! Big Fat Warning !  These directories had better exist, especially the second one.
    SINGLE="${MCBase}/bin"
    SERVER="${MCBase}/server/stash"
    if [[ ! -d $SINGLE ]]; then
        echo "Can't save, you don't seem to have a valid minecraft installation at ${MCBase}!"
        # TODO: This needs fixing, so the bash script will create the directory for us.
        exit 1
    fi
    if [[ ! -d $SERVER ]]; then
        echo "Can't save, please type:  mkdir -p ${MCBase}/server/stash "
        exit 1
    fi

    DROPOFF=$1
    if [[ -z $DROPOFF ]]; then
        echo "Can't save something I don't know the name of!"
        exit 1
    fi
    if [[ $DROPOFF = "?" ]]; then
        FetchHelp
        retval=1
        return
    fi
    # Okay, we have a $1, do we cardinalise it?
    # somepattern is 1[12]w[12345][0-9][a-f], somepattern2 is [12].[0-9].[0-9]
    case $DROPOFF in 
        ########## Older releases ########
        1[12]w[012345][0-9][a-f_]) # snapshot version, should be good for snapshots up to the end of 2012
            if [[ ! -f ${SINGLE}/snapshot_${DROPOFF}.jar ]]; then # only fetch if we haven't got it already
                wget -O ${SINGLE}/snapshot_$DROPOFF.jar http://assets.minecraft.net/${DROPOFF//\./_}/minecraft.jar
                retval=$?
            fi
            # We need an error check. If wget returns a 1, then we erase the file we just created.
            if [[ $retval != 0 ]]; then
                rm ${SINGLE}/snapshot_${DROPOFF}.jar
                echo "Download of ${DROPOFF} jar failed, no such version or other error"
                exit 1
            fi
            # otherwise, it succeeded, we might as well go get the server file
            wget -O ${SERVER}/snapshot_server_$DROPOFF.jar http://assets.minecraft.net/${DROPOFF//\./_}/minecraft_server.jar
        ;;
        # older final version, account for x.y and x.y.z from 1.0 to 1.5.1, different home than below's new version
        1.[01234].[0-9]|1.[0-5]|1.5.[01]) 
            if [[ ! -f ${SINGLE}/final_${DROPOFF}.jar ]]; then
                wget -O ${SINGLE}/final_$DROPOFF.jar http://assets.minecraft.net/${DROPOFF//\./_}/minecraft.jar
                retval=$?
            fi
            if [[ $retval != 0 ]]; then
                rm ${SINGLE}/final_${DROPOFF}.jar
                echo "Download of ${DROPOFF} jar failed, no such version or other error"
                exit 1
            fi
            wget -O ${SERVER}/final_server_$DROPOFF.jar http://assets.minecraft.net/${DROPOFF//\./_}/minecraft_server.jar
        ;;
        ########## Newer releases ########
        # New form of final release, covers every single 1.x (1.6 - 1.9) and double digit 1.xx.yy version (1.5.2 up to 1.99.99)
        # almost completely replaced by default launcher's fetching of every version including ancient ones
        1.5.[2-9]|1.[6-9]|1.[6-9].[0-9]|1.[6-9].[1-9][0-9]|1.[1-9][0-9]|1.[1-9][0-9].[0-9]|1.[1-9][0-9].[0-9][0-9])
            SINGLE="${MCBase}/versions" # A new home for the release
            if [[ ! -d ${SINGLE}/${DROPOFF} ]]; then
			    mkdir -p "${SINGLE}/${DROPOFF}"  # catch the "no .minecraft/versions dir" error
            fi
            if [[ ! -f ${SINGLE}/${DROPOFF}/${DROPOFF}.jar ]]; then
                wget -O "${SINGLE}/${DROPOFF}/${DROPOFF}.jar" http://s3.amazonaws.com/Minecraft.Download/versions/${DROPOFF}/${DROPOFF}.jar
                retval=$?
            fi
            if [[ $retval != 0 ]]; then
                rm "${SINGLE}/${DROPOFF}/${DROPOFF}.jar"
                echo "Download of ${DROPOFF} jar failed, no such version or other error"
                exit 1
            fi
            if [[ ! -f ${SINGLE}/${DROPOFF}/${DROPOFF}.json ]]; then
                wget -O "${SINGLE}/${DROPOFF}/${DROPOFF}.json" http://s3.amazonaws.com/Minecraft.Download/versions/${DROPOFF}/${DROPOFF}.json
                retval=$?
            fi
            if [[ $retval != 0 ]]; then
                rm "${SINGLE}/${DROPOFF}/${DROPOFF}.json"
                echo "Download of json file failed, no such version or other error"
                exit 1
            fi
			# Plainly, this isn't correct dropoff point any more, but then, where is?
            wget -O ${SERVER}/final_server_${DROPOFF}.jar http://s3.amazonaws.com/Minecraft.Download/versions/${DROPOFF}/minecraft_server.${DROPOFF}.jar

		;;
        # New form of snapshot release, good up to end of 2029, almost completely replaced by default launcher's fetching
        13w1[6-9][a-f_]|13w[234][0-9][a-f_]|13w5[012][a-f_]|1[4-9]w[0-4][0-9][a-l_]|1[4-9]w5[0-3][a-l_]|2[0-9]w[0-4][0-9][a-l_]|2[0-9]w5[0-3][a-l_]) 
            SINGLE="${MCBase}/versions" # A new home for the release
            SERVER="${MCBase}/server/stash" # hmm? Does this remain the same?
            if [[ ! -d ${SINGLE}/${DROPOFF} ]]; then
			    mkdir -p "${SINGLE}/${DROPOFF}"  # catch the "no .minecraft/versions dir" error
            fi
            if [[ ! -f ${SINGLE}/${DROPOFF}/${DROPOFF}.jar ]]; then
                wget -O "${SINGLE}/${DROPOFF}/${DROPOFF}.jar" http://s3.amazonaws.com/Minecraft.Download/versions/${DROPOFF}/${DROPOFF}.jar
                retval=$?
            fi
            if [[ $retval != 0 ]]; then
                rm "${SINGLE}/${DROPOFF}/${DROPOFF}.jar"
                echo "Download of snapshot ${DROPOFF} jar failed, no such version or other error"
                exit 1
            fi
            if [[ ! -f ${SINGLE}/${DROPOFF}/${DROPOFF}.json ]]; then
                wget -O "${SINGLE}/${DROPOFF}/${DROPOFF}.json" http://s3.amazonaws.com/Minecraft.Download/versions/${DROPOFF}/${DROPOFF}.json
                retval=$?
            fi
            if [[ $retval != 0 ]]; then
                rm "${SINGLE}/${DROPOFF}/${DROPOFF}.json"
                echo "Download of json failed, no such version or other error"
                exit 1
            fi
			# Plainly, this isn't correct dropoff point any more, but then, where is?
            wget -O ${SERVER}/final_server_${DROPOFF}.jar http://s3.amazonaws.com/Minecraft.Download/versions/${DROPOFF}/minecraft_server.${DROPOFF}.jar

		;;

##################
# These options to -f download various launchers, make sure we don't overwrite.
##################
        launcher|default|vanilla) # default launcher, should we call this default instead of launcher?
            wget -O ${MCBase}/bin/minecraft-launcher.jar https://s3.amazonaws.com/Minecraft.Download/launcher/Minecraft.jar
            ;;
#        devlauncher) # development launcher, which may need to be removed as it has been moved to the default
#            wget -O ${MCBase}/MinecraftDev.jar https://s3.amazonaws.com/Minecraft.Download/launcher/MinecraftDev.jar
#            ;;
        skmc) # non-default launcher, we should probably back up the last version
            # TODO: Must do the backup last launcher thing for all the rest of them
            mv "${MCBase}/bin/SKMCLauncher.jar" "${MCBase}/bin/SKMCLauncher-last.jar"
            wget -O ${MCBase}/bin/SKMCLauncher.jar http://build.sk89q.com/job/SKMCLauncher/lastSuccessfulBuild/artifact/target/SKMCLauncher.jar
            ;;
        magic) # another non-default launcher
            wget -O ${MCBase}/bin/MagicLauncher-1.0.0.jar http://magiclauncher.com/download.php?f=MagicLauncher_1.0.0.jar
            ;;
        digiex) # non-default launcher, definitely ancient
            wget -O ${MCBase}/bin/mclauncher.jar http://minecraft.digiex.org/dlfiles/mclauncher.jar
            ;;
# TODO: what the? We supply it on the commandline but not in here?
#        multi) #yet another non-default, we can't normally download this one directly, it's adfly'd
# This hostname no longer resolves
        # seems we should only do the below if the build status is successful
        # TODO: get the correct arch binary, currently this is locked to x86
#            wget -O jobstatus "http://ci.forkk.net/job/MultiMC4Linux/arch=x86/lastBuild/consoleText"
#            grep -qi SUCCESS jobstatus
#            retval=$?
#            rm jobstatus
            # TODO: do we need to cover x86_64 too?
#            if [[ retval -eq 0 ]]; then
#                wget -O ${MCBase}/bin/MultiMC "http://ci.forkk.net/job/MultiMC4Linux/arch=x86/lastBuild/artifact/MultiMC"
#            else
#                echo "last build of MultiMC for Linux-x86 failed"
#            fi
#            ;;
        craft) # Patching in support for craftlauncher, one of the few to need a different root.
            if [[ ! -d ${CLBase} ]]; then
                mkdir ${CLBASE}
                # TODO: If this fails, we have bigger problems
            fi
            wget -O ${CLBase}/craftlandloader.jar "http://craftland.org/mod/craftlandloader.jar"
            # TODO: how the heck do we execute this? we need loader.jar, not craftlandloader.jar
            echo "Please execute 'java -jar '${CLBase}/craftlandloader.jar"
            echo "This will prepare craftland for execution later, with ${ME} -l craft"
            ;;
        ftb) # Patching in support for FTB_Launcher, one of the few to need a different root.
            if [[ ! -d ${FTBBase} ]]; then
                mkdir ${FTBBase}
                # TODO: If this fails, we have bigger problems
            fi
            # TODO: correct this for each version, scrape webpage?
            # NB: launcher updates itself, and there's now a new version, not yet compat with Linux as of 2015
#            wget -O ${FTBBase}/FTB_Loader.jar "http://www.creeperrepo.net/direct/FTB2/697ef1c4d2cb0eddfbf53c3eceba4889/launcher%5EFTB_Launcher.jar"
            wget -O ${FTBBase}/FTB_Loader.jar "http://ftb.cursecdn.com/FTB2/launcher/FTB_Launcher.jar"
            ;;
        technic) # Patching in support for Technic_Loader, one of the few to need a different root.
            if [[ ! -d ${TechnicBase} ]]; then
                mkdir ${TechnicBase}
                # TODO: If this fails, we have bigger problems
            fi
            # TODO: correct this for each version, scrape webpage?
            wget -O ${TechnicBase}/Technic_Loader.jar "http://mirror.technicpack.net/launcher/221/TechnicLauncher.jar"
            ;;
        terra) # Patching in support for TerraFirmaCraft, one of the few to need a different root.
            # TODO: Remove this really soon, as TerraFirmaCraft now uses the default launcher
            if [[ ! -d ${TerraFirmaBase} ]]; then
                mkdir ${TerraFirmaBase}
                # TODO: If this fails, we have bigger problems
            fi
            pushd "${TerraFirmaBase}" # Don't forget to pop again
            wget -O ${TerraFirmaBase}/TFCLauncher.zip "http://terrafirmacraft.com/files/TFCLauncher.zip"
            # Now we need to unzip it, as it's not just a jar... now it comes with a Start.sh/bat
            unzip TFCLauncher.zip
            popd
            ;;
        mvc) 
            wget -O ${MCBase}/bin/MVC.jar "http://mvc.tunkdesign.com/cgi-bin/load.cgi?dljar/MVC.jar"
            ;;
        bukkitrb) 
            ParseLatestRB
            wget -O ${MCBase}/server/craftbukkit-${BUKKITVER}.jar http://dl.bukkit.org/latest-rb/craftbukkit.jar
            ;;
#        bukkitbeta) 
#            ParseLatestBeta
#            wget -O ${MCBase}/server/craftbukkit-beta.jar http://cbukk.it/craftbukkit-beta.jar
#            ;;
        help) 
            FetchHelp
            break # leaves the case switch
            ;;
        atl) # Only true for Linux, at least currently. Windows has an exe, Mac has an app.
            if [[ ! -d ${ATLauncherBase} ]]; then
                mkdir ${ATLauncherBase}
                # TODO: If this fails, we have bigger problems
            fi
            wget -O ${ATLauncherBase}/ATLauncher.jar https://www.atlauncher.com/download/jar
            ;;
        aether) # This has different values of launcher home for Windows/OSX. This is one of the few to need a different root.
            # Incidentally, this possibly doesn't take care of the rest of the files
            # TODO: we seriously need to update this from classic to Aether II
            if [[ ! -d "${AetherLauncherBase}" ]]; then
                mkdir "${AetherLauncherBase}"
                # TODO: If this fails, we have bigger problems
            fi
            wget -O "${AetherLauncherBase}/aether-launcher-bootstrap.jar" https://files.gildedgames.com/minecraft/aether/dist/launcher/aether-launcher-bootstrap.jar
            ;;
#        server) echo "can't (yet) fetch server on its own"
#            exit 1
#            ;;
        *) echo "Can't recognise $1 (yet). minecrafty -f help for stuff I can fetch."
            exit 1
            ;;
    esac
}

DefaultSettings() {
        CMDARG="-jar ${MCBase}/bin/minecraft-launcher.jar"
        CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
#        FetchGamma
#        FetchBright
}

SetPADSP() {
    PARUN="padsp "
    CMDRUN="$PARUN $JAVARUN"
    CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

SetPAPause() {
    # This command isn't always the same name
    PARUN="pasuspender -- "
    CMDRUN="$PARUN $JAVARUN"
    CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

# Only of any use for running the vanilla launcher, no good for TerraFirma
SetTinyMemory() {
    MEM="-Xmx256M -Xms128M"
    CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

# Only of any use for running the vanilla or TerraFirma launcher
SetSmallMemory() {
    MEM="-Xmx512M -Xms512M"
    CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

# Only of any use for running the vanilla or TerraFirma launcher
SetMoreMemory() {
    MEM="-Xmx1024M -Xms512M"
    CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

# Only of any use for running the vanilla or TerraFirma launcher
# Also only any good on 64-bit systems.
# TODO: how do we do that, again?
SetEnormousMemory() {
    # Only do this if ${HOSTTYPE} isn't i686
    if [[ ${HOSTTYPE} = "i686" ]]; then
        # do we do nothing and simply refuse, or do we warn the user?
        echo "Unable to allocate more than 1.5Gb on a 32-bit system"
        echo "setting memory to 1Gb"
        # call that procedure instead
        SetMoreMemory
    else
        MEM="-Xmx2048M -Xms1024M"
        CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
    fi
}

SetMonitor() {
# TODO: correctly apply this to -g
    MON=$(( $1 * 2 )) #MonitorOffset
#    if ${GAMMA} set, then rerun SetGamma
    if [[ ${GAMMA} ]]; then 
        SetGamma
    fi
}

ShowVersionString() {
    echo "$ME: ${VERSION}.${MINOR}.${PATCH}"
    unset CMD
# We need to exit
    break 
}

# Now rendered irrelevant
SetDevLauncher() {
        CMDARG="-jar ${MCBase}/MinecraftDev.jar"
        CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
#        FetchGamma
#        FetchBright
}

SetMagicLauncher() {
# queue this up so it runs the MagicLauncher.
    CMDRUN="$PARUN $JAVARUN -Xincgc"
    CMDARG="-jar ${MCBase}/bin/MagicLauncher_1.0.0.jar"
    CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

SetMultiLauncher() {
# queue this up so it runs MultiMC.
    CMDRUN="${MCBase}/bin/MultiMC"
    CMDARG=""
    CMD="${CMDRUN} ${CMDOPT} ${CMDARG}"
}

# !! This executes the craftland loader, which requires an INSTALLED craftland
SetCraftLauncher() {
    CMDRUN="$PARUN $JAVARUN"
    CMDARG="-Xincgc -jar ${CLBase}/loader.jar"
    CMD="${CMDRUN} ${CMDOPT} ${CMDARG}"
}

SetDigiLauncher() {
# runs  digiexs' mclauncher
    CMDRUN="$PARUN $JAVARUN -Xincgc"
    CMDARG="-jar ${MCBase}/bin/mclauncher.jar"
    CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

SetSKMCLauncher() {
# runs SKMClauncher
#    CMDARG="-jar ${MCBase}/bin/SKMCLauncher-3.1.7-SNAPSHOT.jar"
    if [[ -n ${MEM} ]]; then
        echo "${ME}: ${MEM} (from -T/-B/-E) is being ignored. skmclauncher sets memory for minecraft from its own settings"
    fi
# We don't need ${MEM} here, as SKMClauncher allows for setting specific memory when starting minecraft.
    CMDRUN="$PARUN $JAVARUN -Xincgc"
    CMDARG="-jar ${MCBase}/bin/SKMCLauncher.jar"
    CMD="${CMDRUN} ${CMDOPT} ${CMDARG}"
}

SetFTBLauncher() {
    if [[ -n ${MEM} ]]; then
        echo "${ME}: ${MEM} (from -T/-B/-E) is being ignored. FTBLauncher sets memory for minecraft from its own settings"
    fi
    MYDIR="${FTBBase}"
    CMDRUN="$PARUN $JAVARUN -Xincgc"
    CMDARG="-jar ${FTBBase}/FTB_Launcher.jar"
    CMD="${CMDRUN} ${CMDOPT} ${CMDARG}"
}

SetTechLauncher() {
    if [[ -n ${MEM} ]]; then
        echo "${ME}: ${MEM} (from -T/-B/-E) is being ignored. TechnicLauncher sets memory for minecraft from its own settings"
    fi
    MYDIR="${TechnicBase}"
    CMDRUN="$PARUN $JAVARUN -Xincgc"
    CMDARG="-jar ${TechnicBase}/TechnicLauncher.jar"
    CMD="${CMDRUN} ${CMDOPT} ${CMDARG}"
}

SetTerraLauncher() {
    # For some reason, this launcher needs more memory than just 256Mb
    # TODO: update this so it starts with  memory settings from -TSBE, strip out T
    MYDIR="${TerraFirmaBase}"
    MEM=${MEM:-"-Xms512M -Xmx1024M"}
    CMDRUN="$PARUN $JAVARUN -Xincgc"
    CMDARG="-jar ${TerraFirmaBase}/TFCLauncher.jar"
    CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

# runs mvc, a minecraft version patcher
SetMVCLauncher() {
    CMDRUN="$PARUN $JAVARUN -Xincgc"
    CMDARG="-jar ${MCBase}/bin/MVC.jar"
    CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

# runs ATLauncher, a minecraft version patcher
SetATLauncher() {
    CMDRUN="$PARUN $JAVARUN -Xincgc"
    CMDARG="-jar ${ATLauncherBase}/ATLauncher.jar"
    CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

# runs Aether Launcher (for Aether II, NOT Aether Classic)
# TODO: there's an anomaly here for Aether, I should resolve it
# 20180301 Aether-launcher-bootstrap no longer works
SetAetherLauncher() {
    CMDRUN="$PARUN $JAVARUN -Xincgc"
    CMDARG="-jar ${AetherLauncherBase}/aether-launcher-bootstrap.jar"
    CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

SetRefresh() {
    # We need this so we can reset the gamma or refresh rate later on.
    FetchGamma
    Refresh=$1
}

# This fetches commandline args, parses them, then fires off relevant sections of FUNCARRAY[$ONECMD] with $OPTARG
GetOpts() {
    while getopts ${GETOPTS} ONECMD; do
        case ${ONECMD} in "?"|"h")
# handle the getopts error here. This stops the script on an incorrect switch.
# An alternative would have been to check ${OPTARG} against "-?"|"-h" in a case switch specifically for the help switch
            Help
            unset CMD
            break
            ;;
#        "f") FetchOpts
#            ;;
#        "l") LaunchOpts
#            ;;
        esac

#        fi
        for (( t=0; t<"${#GETOPTARRAY[@]}"; t++ )); do
            if [[ "${ONECMD}:" == "${GETOPTARRAY[$t]}" ]]; then 
                ONECMD="${ONECMD}:"
            fi
        done
        ${FUNCARRAY[$ONECMD]} ${OPTARG}
    done
}

FetchOpts() { # both FetchOpts and LaunchOpts can't use getopts, as getopts under bash doesn't use words as options
    while getopts ${FETCHOPTS} ONECMD; do
#        if [[ "${ONECMD}" == "?" ]]; then
        case ${ONECMD} in "?"|"h")
# handle the getopts error here. This stops the script on an incorrect switch.
# An alternative would have been to check ${OPTARG} against "-?"|"-h" in a case switch specifically for the help switch
            FetchHelp
            unset CMD
            break
            ;;
        esac

#        fi
        for (( t=0; t<"${#FETCHOPTARRAY[@]}"; t++ )); do
            if [[ "${ONECMD}:" == "${FETCHOPTARRAY[$t]}" ]]; then 
                ONECMD="${ONECMD}:"
            fi
        done
        ${FUNCARRAY[$ONECMD]} ${OPTARG}
    done
}

LaunchOpts() {
    while getopts ${LAUNCHOPTS} ONECMD; do
#        if [[ "${ONECMD}" == "?" ]]; then
        case ${ONECMD} in "?"|"h")
# handle the getopts error here. This stops the script on an incorrect switch.
# An alternative would have been to check ${OPTARG} against "-?"|"-h" in a case switch specifically for the help switch
            LaunchHelp
            unset CMD
            break
            ;;
        esac

#        fi
        for (( t=0; t<"${#GETOPTARRAY[@]}"; t++ )); do
            if [[ "${ONECMD}:" == "${GETOPTARRAY[$t]}" ]]; then 
                ONECMD="${ONECMD}:"
            fi
        done
        ${FUNCARRAY[$ONECMD]} ${OPTARG}
    done
}

# Creates the associative command array, using LOA[0] and LOA[1]
StuffCommands() {
for (( c=0; c<${#LOA[@]}; c+=3 )); do
  CMDARRAY[${LOA[c]}]=${LOA[c+1]}
done

}

# End of functions, now let's create our arrays

StuffGetOpts
StuffFetchOpts
StuffLaunchOpts
StuffCommands

# Stuffed arrays? Now let's do something with them
case $1 in "-?"|"-h") Help
exit 0
;;
esac
DefaultSettings
GetOpts $@

if [[ ${CMD+defined} ]]; then
  RunMC
  # TODO: how to fold these calls into a single xrandr call
  if [[ ${GAMMA} ]]; then
    ResetGamma
  fi
  if [[ ${BRIGHT} ]]; then
    ResetBright
  fi
  if [[ ${Refresh} ]]; then
    ResetRefresh
  fi
  if [[ ${MYRES} ]]; then
    ResetResolution
  fi
fi
exit $retval

# vim:expandtab:ts=4
