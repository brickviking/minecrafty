#!/bin/bash

VERSION=0
MINOR=73
PATCH=
ME=$(basename $0)
# Default gamma brightness of game
GAMMADEF=1.0
# Rabbit
RESOLUTION=1920x1080
MYRES=
# Default memory assign (whatever the java executable assigns)
MEM=""
# set this to blank too
CMDOPT=" "
# Set this to your favourite java location, whether openjdk or oracle
# If you don't have a java, then you've got problems
JAVARUN="java"
CMDRUN="$JAVARUN"
# Mandatory, though this can be OS-dependent
# MacOsX home: MCBase="~/Library/Application Support/minecraft"
# Windows (cygwin) Home:  MCBase="%APPDATA%/.minecraft" #(supposedly)
# Linux Home: MCBase="${HOME}/.minecraft"
MCBase="${HOME}/.minecraft"
# Better to patch the new launcher into an existing setup than rewire everything
# It seems that the new launcher "shouldn't" live inside ~/.minecraft
#NEWCMDRUN="${MCBase}/minecraft-launcher/minecraft-launcher"
NEWCMDRUN="${HOME}/bin/minecraft-launcher/minecraft-launcher"
# Set the logfile to empty string initially
OUTFILE=""
# Optional, if you add launchers, set a path here, add a SetXyzLauncher()
# function, add a line to ${FOA} and ${LOA} and a stanza in FetchMinecraft()
FTBBase="${HOME}/FTB.minecraft"
FTBAppBase="${HOME}/FTBA"
FTBNewBase="${HOME}/.ftba/bin"
FTBNEWCMDRUN="${FTBNewBase}/minecraft-launcher/minecraft-launcher"
TechnicBase="${HOME}/.technic"
ATLauncherBase="${HOME}/ATLauncher"
MultiMCBase="${MCBase}/MultiMC"

#Obsolete launchers
CLBase="${HOME}/.craftland"
TerraFirmaBase="${HOME}/.tfcraft" # currently at 1.7.10 (20180412)
AetherLauncherBase="${HOME}/.aether_launcher"
AncientLauncher="${HOME}/OldLauncher" # works up to 1.5.1. Maybe.

# Mandatory to declare an associative array
declare -A FUNCARRAY
declare -A CMDARRAY

# New array for filling GETOPTS
GOA=(
"h" Help "provides this help screen (-? gets here as well)"
"v" ShowVersionString "show version string"
"a" AppendLogFile "Append output into a log file"
"c" LogFile "Capture output into a log file"
"T" SetTinyMemory "assign minimal memory to the client (256 Mb)"
"S" SetSmallMemory "assign normal amount of memory to the client (512 Mb)"
"B" SetMoreMemory "assign more memory to the client (1 Gb)"
"E" SetEnormousMemory "assign lots more memory to the client, only on 64-bit systems (2 Gb)"
"O" SetPADSP "create OSS-like pulseaudio device"
"P" SetPAPause "suspends pulseaudio while Minecraft runs"
"b:" BrightInit "n.n: set the brightness. If unset, $BRIGHTDEF is used. 0.7 darker, 1.2 lighter"
"g:" GammaInit "n.n: set the gamma offset. If unset, $GAMMADEF is used. 0.7 lighter, 1.2 darker"
"m:" SetMonitor "select monitor to apply gamma correction to"
"r:" SetRefresh "nn.n: set a valid refresh rate for the second monitor"
"z:" FetchResolution "XxY: set required resolution (1920x1080 default)"
"f:" FetchMinecraft "retrieves minecraft.jar or launcher, \`-f help' for more details"
"l:" Launcher "starts specified launcher, \`-l help' for more details"
"s:" ServerRun "starts server from \`${MCBase}/server', supply filename"
"d:" SetDesktop "sets desktop"
)

# Entries that aren't used at the moment, they're obsolete, I think.
GONA=(
)

# Entries for the -f (fetch) switch
FOA=(
"help" FetchHelp "help screen for version and launcher downloading"
"1.2.4" VersionCheck "download a specific final-release client"
"13w02b" VersionCheck "download a specific snapshot client"
"launcher" Fetch "download default launcher"
"default" Fetch "download default launcher"
"vanilla" Fetch "download default launcher"
"newlauncher" Fetch "download new GUI default launcher"
"atl" Fetch "download AT Launcher for Linux"
"ftb" Fetch "download FTB launcher"
"ftba" Fetch "download FTB App launcher"
"magic" Fetch "download MagicLauncher"
"multi" Fetch "download MultiMC"
"technic" Fetch "download beta Technic launcher"
"terra" Fetch "download TerraFirmaCraft launcher (1.7.10 only)"
)
# TODO: I could also have entry for spigot in there

# Unused and obsoleted -f entries
FONA=(
"aether" Fetch "download classic Aether Launcher"
"ancient" Fetch "download original Minecraft launcher (up to 1.5.1 only)"
"bukkitrb" Fetch "download latest recommended bukkit build"
"bukkitdevel" Fetch "download absolutely latest bukkit"
"craft" Fetch "download Craftland installer for latest Aether prerelease"
"devlauncher" Fetch "download development launcher"
"digiex" Fetch "download DigiEX launcher (discontinued, obsolete, unavailable for download)"
"mvc" Fetch "download Minecraft Version Changer from TunkDesign"
"skmc" Fetch "download development version of SKMCLauncher.jar (obsolete, may not work)"
)

# Entries for the -l (launcher) switch
LOA=(
"help" LaunchHelp "help screen for launcher starting"
"default" DefaultSettings "run default launcher"
"launcher" DefaultSettings "run default launcher"
"vanilla" DefaultSettings "run default launcher"
"new" NewDefaultSettings "run new default launcher"
"atl" SetATLauncher "run AT Launcher"
"ftb" SetFTBLauncher "run FTB launcher"
"ftba" SetFTBAppLauncher "run FTB App launcher"
"ftbl" SetNewFTBLauncher "run FTB's minecraft_launcher"
"magic" SetMagicLauncher "run MagicLauncher"
"multi" SetMultiLauncher "run MultiMC"
"technic" SetTechLauncher "run Technic launcher"
"terra" SetTerraLauncher "run beta TerraFirmaCraft launcher (1.7.10 only)"
)


# Unused -l entries
LONA=(
"aether" SetAetherLauncher "run classic Aether Launcher"
"ancient" SetArchaicLauncher "run original Minecraft launcher (up to 1.5.1 only)"
"craft" SetCraftLauncher "run CraftLand launcher"
# devlauncher was rendered totally irrelevant when it became the default launcher
"devlauncher" SetDevLauncher "run Mojang's development launcher"
"digiex" SetDigiLauncher "run DigiEX launcher"
"mvc" SetMVCLauncher "run Minecraft Version Changer (MVC.jar)"
"skmc" SetSKMCLauncher "run development version of SKMCLauncher.jar"
)

# Apparently bash now supports ( [string]="value" ) arrays.

# This routine "stuffs" values into GETOPTS for later use by the getopts routine
StuffGetOpts() {
    for (( i=0, p=0; i< ${#GOA[@]}; i+=3, p++ )); do
        GETOPTARRAY+=( "${GOA[i]}" )
        GETOPTS="${GETOPTS}${GOA[i]}"
        FUNCARRAY+=( ["${GETOPTARRAY[p]}"]="${GOA[i+1]}" )
        HELPOPTS+=( "${GOA[i+2]}" )
    done

}

# Put stuff into LaunchOpts array
StuffLaunchOpts() {
    for (( i=0, p=0; i< ${#LOA[@]}; i+=3, p++ )); do
        LAUNCHOPTARRAY+=( "${LOA[i]}" )
        LAUNCHOPTS="${LAUNCHOPTS}${LOA[i]}"
        FUNCARRAY+=( ["${LAUNCHOPTARRAY[p]}"]="${LOA[i+1]}" )
        LAUNCHHELPOPTS+=( "${LOA[i+2]}" )
    done
}

# Put stuff into FetchOpts array
StuffFetchOpts() { #Set this up for launchers
    for (( i=0, p=0; i< ${#FOA[@]}; i+=3, p++ )); do
        FETCHOPTARRAY+=( "${FOA[i]}" )
        FETCHOPTS="${FETCHOPTS}${FOA[i]}"
        FUNCARRAY+=( ["${FETCHOPTARRAY[p]}"]="${FOA[i+1]}" )
        FETCHHELPOPTS+=( "${FOA[i+2]}" )
    done
}

Help() {
    echo "$ME: Help screen"
    echo "$ME -${GETOPTS}"
    for (( i=0, p=0; p<${#GETOPTARRAY[@]}; i+=3, p++ )); do
        echo "-${GETOPTARRAY[p]}    ${GOA[i+2]}"
    done
}

LaunchHelp() {
    LOTA="${LAUNCHOPTARRAY[0]}"
    for (( i=3, p=1; p<${#LAUNCHOPTARRAY[@]}; i+=3, p++ )); do
        LOTA+="|${LAUNCHOPTARRAY[p]}"
    done
    # Print short option list
    echo "$ME -l [${LOTA}]"
    # Print long option list
    for (( i=0, p=0; p<${#LAUNCHOPTARRAY[@]}; i+=3, p++ )); do
        echo "-l ${LAUNCHOPTARRAY[p]}    ${LOA[i+2]}"
    done
}

FetchHelp() {
    FOTA="${FETCHOPTARRAY[0]}"
    for (( i=3, p=1; p<${#FETCHOPTARRAY[@]}; i+=3, p++ )); do
        FOTA+="|${FETCHOPTARRAY[p]}"
    done
    # Print short option list
    echo "$ME -f [${FOTA}]"
    # Print long option list
    for (( i=0, p=0; p<${#FETCHOPTARRAY[@]}; i+=3, p++ )); do
        echo "-f ${FETCHOPTARRAY[p]}    ${FOA[i+2]}"
    done
}

LogFile() {
# Set output file for stdout/stderr to minecrafty.output.txt
if [[ -z ${OUTFILE} ]]; then # don't hammer the -a (OverWrite) switch
  OUTFILE="${MCBase}/minecrafty.output.txt"
fi
}

AppendLogFile() {
# Set output file for stdout/stderr to minecrafty.output.txt
OUTFILE="-a ${MCBase}/minecrafty.output.txt"
}

# Hopefully sets brightness, separate from the gamma
BrightInit() {
    if [[ -z $MON ]]; then MON=0; fi # set a default if one hasn't been set already
    if [[ ${1} == ${1//[^[:digit:]\.]/} ]]; then
        if [[ ! $BRIGHT ]]; then # Only set if it hasn't already been
            BRIGHT=${1:-${BRIGHTDEF}}
        else
            echo "Brightness has been set to $BRIGHT already, ignoring $1"
        fi
    else
# Could get tangled up with next -belts: parameter if g is empty
        echo "I can't set brightness to ${1}! Try using a number such as 0.7, .7 or 1"
    fi
}

FetchBright() {
# TODO: I should put xrandr output into a var, as it's used multiple places
# This routine fetches available outputs that are plugged in
    BARRAY=( $(xrandr --verbose | awk 'NR == 1 { next }; match($0, /^[[:alnum:]\-]+/) { output = substr($0,RSTART, RLENGTH) }; /Brightness:/ { print output, $2 }') )
}

SetBright() {
# This'll brighten/darken things a bit - only thing that needs changing will be the output monitor
    xrandr --output ${BARRAY[${MON}]} --brightness "${BRIGHT}"
}

ResetBright() {
# TODO: Remove host dependency, pretty hard to do without having X involved anyhow.
# Now we put the brightness back to normal, on the first screen
    BRIGHT=${BARRAY[$MON+1]}
#    xrandr --output ${BARRAY[$MON]} --brightness ${BARRAY[$MON+1]}
    SetBright # Might as well reuse the same function.
}

FetchResolution() {
# This routine fetches the default resolution at the time of first running the program
# TODO: what if we have multiple screens? A virtual desktop of a different size?
# RES=$(xdpyinfo | grep dimension | egrep -o "[[:digit:]]{3,4}x[[:digit:]]{3,4}" | head -n 1)
read RES < <(xdpyinfo | sed -rn 's/.*dimension.* ([0-9]+x[0-9]+).*/\1/p')
# Better feed the BARRAY, as it holds my available monitors
FetchBright
# TODO: Please PLEASE find out how to sanity check this one
MYRES=${1}
}

SetResolution() {
# Just like it says on the tin, sir
# Only change if there's a reason to do so
# TODO: Figure out what $MON is supposed to be
if [[ ${RES} != ${MYRES} ]]; then
    if [[ ${BARRAY} ]]; then
# WARNING: Ouch, multiple monitors???
        xrandr --output ${BARRAY[${MON}]} --mode ${MYRES}
    else
        xrandr --output ${MON} --mode ${MYRES}
    fi
else
    unset MYRES # means we don't reset it later
fi
}

ResetResolution() {
# Now we put the resolution back to normal, a call to SetResolution with desired RESOLUTION
# TODO: what about multiple screens?
MYRES=${RES}
xrandr --output ${BARRAY[${MON}]} --mode ${MYRES}
}

GammaInit() {
    if [[ -z $MON ]]; then MON=0; fi # set a default if one hasn't been set already
    if [[ ${1} == ${1//[^[:digit:]\.]/} ]]; then
        if [[ ! $GAMMA ]]; then # Only set if it hasn't already been
            GAMMA=${1:-${GAMMADEF}}
        else
            echo "Gamma has been set to $GAMMA already, ignoring $1"
        fi
    else
# Could get tangled up with next -belts: parameter if g is empty
        echo "I can't set your gamma to ${1}! Try using a number such as 0.7, .7 or 1"
    fi
}

FetchGamma() {
# TODO: I should put xrandr output into a var, as it's used multiple places
# This routine fetches available outputs that are plugged in
    GARRAY=( $(xrandr --verbose | awk 'NR == 1 { next }; match($0, /^[[:alnum:]\-]+/) { output = substr($0,RSTART, RLENGTH) }; /Gamma:/ { print output, $2 }') )
}

SetGamma() {
# This'll brighten/darken things a bit - only thing that needs changing will be the output monitor
    xrandr --output ${GARRAY[${MON}]} --gamma "${GAMMA}:${GAMMA}:${GAMMA}"
}

ResetGamma() {
# TODO: Remove host dependency, pretty hard to do without having X involved anyhow.
# Now we put the brightness back to normal, on the first screen
    GAMMA=${GARRAY[$MON+1]}
echo "Inside ResetGamma, with ${GAMMA}"
#    xrandr --output ${GARRAY[$MON]} --gamma ${GARRAY[$MON+1]}
    SetGamma # Might as well reuse the same function.
}

# This is meant to fetch the Refresh rates for each connected screen
FetchRefresh() {
# No idea what to tack onto the end, except that I need to look for Connected,
# then Current, and two lines after, the refresh rate that I need.
# I have to create entries for (possibly multiple) screens
    #
  RARRAY=( $(xrandr --verbose ) )
}

SetRefresh() {
    # We need this so we can reset the gamma or refresh rate later on.
    FetchGamma
    Refresh=$1
}

ResetRefresh() {
# TODO: It seems if the gamma never got loaded, then this function always fails
# The game had a habit of resetting the other screen to 60Hz. Not nice.
# TODO: we really should leave things as we found them and reset mode to what it was.
    xrandr --output ${GARRAY[2]} --rate ${Refresh} --mode 1024x768
#    fi
}

# Central one shot run engine.
RunMC() {
# TODO: merge these if they're both set.
    if [[ -n "${MYDIR}" ]]; then
        pushd "${MYDIR}"
    else
        pushd "${MCBase}"
    fi

    if [[ ${GAMMA} ]]; then
# We already did GammaInit
        FetchGamma
        SetGamma $GAMMA
    fi
    if [[ ${BRIGHT} ]]; then
# We already did BrightInit
        FetchBright
        SetBright $BRIGHT
    fi
    if [[ ${MYRES} ]]; then
        SetResolution
    fi
# Run the command we got earlier, finishing by peeling the return value
    if [[ -z "${OUTFILE}" ]]; then
        if [[ "${MYDESK}" ]]; then
            xdotool set_desktop ${MYDESK}
        fi
        ${CMD}
        retval=$?
    else
        if [[ "${MYDESK}" ]]; then
            xdotool set_desktop ${MYDESK}
        fi
# Run the command we got earlier, outputting the command through tee.
# return value will be from tee
        ${CMD} 2>&1 | tee ${OUTFILE}
        retval=$?
    fi
    popd
}

ServerRun() {
# TODO: add the new server location of .minecraft/server/whatever.jar
# Wrap with DoesFileExist for ${OPTARG}, don't forget the empty case.
    if [[ ${1} == "default" ]]; then
        ServerName=minecraft_server.jar
    else
        ServerName=${1}
    fi

    ServerPlace="${MCBase}/server"
    echo "ServerName now set to ${ServerName}"
    if [[ -f ${ServerPlace}/${ServerName} ]]; then
        # TODO: how do we decide if server requires any more memory?
        CMD="$JAVARUN -Xmx1024M -Xincgc -jar ${ServerPlace}/${ServerName}"
    else
        echo -e "We don't have the $1 server here, please download from www.minecraft.net,\ngetbukkit.org or spigotmc.org"
#        echo -e "I can fetch default server versions, $0 -f 1.7.10 (example) will fetch\nclient and server together"
        retval=1 #bad doggie, bad, there's no point in continuing any further
        echo "Instead, here's a default launcher"
    fi
}

# designed to assign CMD the correct launcher
Launcher() {
    if [[ "$1" == "?" ]]; then
      LaunchHelp
      unset CMD
      retval=1
      return
    fi
    if [[ ${CMDARRAY[$1]+set} ]]; then
        case $1 in 
        help) LaunchHelp
            unset CMD
            ;;
        *)
            ${CMDARRAY[$1]}
            ;;
        esac
    else
        # This starts default launcher if there's no $1 launcher
        echo "We haven't got a launcher called $1 yet"
        retval=1
    fi
}

# Hopefully, pull down the RSS feed and peel the top entry
ParseLatestRB() {
    wget -O ${MCBase}/server/text http://dl.bukkit.org/downloads/craftbukkit/feeds/latest-rb.rss
    # grovel through the file looking for something, peel the numbers
    BUKKITVER=$(grep -h -m1 "<item><title>Recommended Build for CraftBukkit: " ${MCBase}/server/text | cut -c522-531 )
}

ParseLatestBeta() {
    wget -O ${MCBase}/server/text http://dl.bukkit.org/downloads/craftbukkit/feeds/latest-rb.rss
    # grovel through the file looking for something, peel the numbers
    beefjerky=$(grep -h -m1 ${MCBase}/server/text "<item><title>Recommended Build for CraftBukkit: ")
}

#This should fetch the manifest for available versions
# Called from FetchMinecraft
FetchGlobalManifest() {
    wget -O ${MCHOME}/stash/version_manifest.json https://launchermeta.mojang.com/mc/game/version_manifest.json
    # TODO: Please code the fail case!
    # TODO: we should deal with commas at this stage so that searching will work
    # blank function MassageVersionManifest for that()
}

# This should fetch the manifest for individual version
# Called from FetchMinecraft
FetchVersionManifest() {
# takes a version to download
    # We need a file to grep
    if [[ -f $manifest ]]; then
	DROPOFF_MANIFEST_URL=$(grep ${DROPOFF} ${manifest}| grep URL)
    fi
    wget -O ${DROPOFF}/${DROPOFF}.json ${DROPOFF_MANIFEST_URL}
}

# TODO: please PLEASE create this
MassageVersionManifest() {
    echo "${ME}: doesn't work, please code MassageVersionManifest()"
    # Blank, but will add CR at each , in the XML file
    return
}

# very very big function to handle fetching everythig from launchers to versions
# BUGS: too big by far, many of the versions can no longer be retrieved from AWS
FetchMinecraft() {
    # Pulled this in from fetchminecraft.sh at version 0.1.9
    # ver 0.0.0: initial cut
    # 0.0.1: finally got the script fetching the client and server
    #      : now I just need to toggle -c/-s for fetching just the client or server
    # (20,000 years later) -c/-s switch both used elsewhere.
    # 0.0.2: checked if we succeeded in fetching the file
    # 0.0.3: split off the two patterns, as they create two slightly different names
    #      : i.e.  final_$VER or snapshot_$VER.  Also shifted the initial cd outside the case switch.
    # 0.1.1: no idea why I upgraded to this number, but hey.
    # 0.1.9: folded this directly into minecrafty, also added another two years of snapshots
    # 0.2.0: modified newfetch pattern to cover up to 1.99.99
    # ==========================================
    # NB: this functionality has been (mostly) superceded by the new vanilla launcher's fetching client versions
    # ==========================================
    # NB: Should we have a "fetch server" switch? Currently we fetch both.

    # $1 ought to be something like 12w32a or 1.3.2, as it'll get used to name save files.
    unset CMD # we need to unset this, so that we don't accidentally start minecraft

    # ! Big Fat Warning !  These directories had better exist, especially the second one.
    SINGLE="${MCBase}/bin"
    # Need this for new launcher, as it doesn't like being inside .minecraft
    NEWSINGLE="${HOME}/bin"
    SERVER="${MCBase}/server/stash"
    if [[ ! -d $SINGLE ]]; then
        echo "Can't save, you don't seem to have a valid Minecraft installation at ${MCBase}!"
        # TODO: This needs fixing, so the bash script will create the directory for us.
        exit 1
    fi
    if [[ ! -d $SERVER ]]; then
        echo "Can't save, please type:  mkdir -p ${MCBase}/server/stash "
        exit 1
    fi

    DROPOFF=$1
    if [[ -z $DROPOFF ]]; then
        echo "Can't save something I don't know the name of!"
        exit 1
    fi
    if [[ $DROPOFF = "?" ]]; then
        FetchHelp
        retval=1
        return
    fi
    # Okay, we have a $1, do we cardinalise it?
    # somepattern is 1[12]w[12345][0-9][a-f], somepattern2 is [12].[0-9].[0-9]
    case $DROPOFF in 
        help) 
            FetchHelp
            ;;
        ########## Older client/server releases ########
        1[12]w[012345][0-9][a-f_]) # snapshot version, should be good for snapshots up to the end of 2012
            if [[ ! -f ${SINGLE}/snapshot_${DROPOFF}.jar ]]; then # only fetch if we haven't got it already
                wget -O ${SINGLE}/snapshot_$DROPOFF.jar http://assets.minecraft.net/${DROPOFF//\./_}/minecraft.jar
                retval=$?
            fi
            # We need an error check. If wget returns a 1, then we erase the file we just created.
            if [[ $retval != 0 ]]; then
                rm ${SINGLE}/snapshot_${DROPOFF}.jar
                echo "Download of ${DROPOFF} jar failed, no such version or other error"
                exit 1
            fi
            # otherwise, it succeeded, we might as well go get the server file
            wget -O ${SERVER}/snapshot_server_$DROPOFF.jar http://assets.minecraft.net/${DROPOFF//\./_}/minecraft_server.jar
            retval=$?
            if [[ $retval != 0 ]]; then
                rm ${SERVER}/snapshot_server_${DROPOFF}.jar
                echo "Download of ${DROPOFF} server jar failed, no such version or other error"
                exit 1
            fi
        ;;
        # older final version, account for x.y and x.y.z from 1.0 to 1.5.1, different home than below's new version. Clients only below 1.2
        1.[01234].[0-9]|1.[0-5]|1.5.[01]) 
            if [[ ! -f ${SINGLE}/final_${DROPOFF}.jar ]]; then
                wget -O ${SINGLE}/final_$DROPOFF.jar http://assets.minecraft.net/${DROPOFF//\./_}/minecraft.jar
                retval=$?
            fi
            if [[ $retval != 0 ]]; then
                rm ${SINGLE}/final_${DROPOFF}.jar
                echo "Download of ${DROPOFF} jar failed, no such version or other error"
                exit 1
            fi
            wget -O ${SERVER}/final_server_$DROPOFF.jar http://assets.minecraft.net/${DROPOFF//\./_}/minecraft_server.jar
            retval=$?
            if [[ $retval != 0 ]]; then
                rm ${SERVER}/final_server_${DROPOFF}.jar
                echo "Download of ${DROPOFF} server jar failed, no such version or other error"
                exit 1
            fi
        ;;
        ########## Newer client/server releases ########
        # New form of final release, covers every single 1.x (1.6 - 1.9) and double digit 1.xx.yy version (1.5.2 up to 1.99.99)
        # almost completely replaced by default launcher's fetching of every version including ancient ones
        1.5.[2-9]|1.[6-9]|1.[6-9].[0-9]|1.[6-9].[1-9][0-9]|1.[1-9][0-9]|1.[1-9][0-9].[0-9]|1.[1-9][0-9].[0-9][0-9])
            SINGLE="${MCBase}/versions" # A new home for the release
            if [[ ! -d ${SINGLE}/${DROPOFF} ]]; then
			    mkdir -p "${SINGLE}/${DROPOFF}"  # catch the "no .minecraft/versions dir" error
            fi
            if [[ ! -f ${SINGLE}/${DROPOFF}/${DROPOFF}.jar ]]; then
                wget -O "${SINGLE}/${DROPOFF}/${DROPOFF}.jar" http://s3.amazonaws.com/Minecraft.Download/versions/${DROPOFF}/${DROPOFF}.jar
                retval=$?
            fi
            if [[ $retval != 0 ]]; then
                rm "${SINGLE}/${DROPOFF}/${DROPOFF}.jar"
		rmdir "${SINGLE}/${DROPOFF}/"
                echo "Download of ${DROPOFF} jar failed, no such version or other error"
                exit 1
            fi
            if [[ ! -f ${SINGLE}/${DROPOFF}/${DROPOFF}.json ]]; then
                wget -O "${SINGLE}/${DROPOFF}/${DROPOFF}.json" http://s3.amazonaws.com/Minecraft.Download/versions/${DROPOFF}/${DROPOFF}.json
                retval=$?
            fi
	    # Would we ever have a naked jar? (i.e. no .json)
            if [[ $retval != 0 ]]; then
                rm "${SINGLE}/${DROPOFF}/${DROPOFF}.json"
                echo "Download of json file failed, no such version or other error"
                exit 1
            fi
			# Plainly, this isn't correct dropoff point any more, but then, where is?
            wget -O ${SERVER}/final_server_${DROPOFF}.jar http://s3.amazonaws.com/Minecraft.Download/versions/${DROPOFF}/minecraft_server.${DROPOFF}.jar

		;;
        # New form of snapshot release, good up to end of 2029, almost completely replaced by default launcher's fetching
#        13w1[6-9][a-f_]|13w[234][0-9][a-f_]|13w5[012][a-f_]|1[4-9]w[0-4][0-9][a-l_]|1[4-9]w5[0-3][a-l_]|2[0-9]w[0-4][0-9][a-l_]|2[0-9]w5[0-3][a-l_]) # original pattern
        13w1[6-9][a-f_]|13w[234][0-9][a-f_]|13w5[012][a-f_]|1[4-7]w[0-4][0-9][a-l_]|1[4-7]w5[0-3][a-l_]|18w0[0-9][a-l_]|18w1[0-6][a-l_]) # changed because of version download changes
            SINGLE="${MCBase}/versions" # A new home for the release
            SERVER="${MCBase}/server/stash" # hmm? Does this remain the same?
            if [[ ! -d ${SINGLE}/${DROPOFF} ]]; then
			    mkdir -p "${SINGLE}/${DROPOFF}"  # catch the "no .minecraft/versions dir" error
            fi
            if [[ ! -f ${SINGLE}/${DROPOFF}/${DROPOFF}.jar ]]; then
                wget -O "${SINGLE}/${DROPOFF}/${DROPOFF}.jar" http://s3.amazonaws.com/Minecraft.Download/versions/${DROPOFF}/${DROPOFF}.jar
                retval=$?
            fi
            if [[ $retval != 0 ]]; then
                rm "${SINGLE}/${DROPOFF}/${DROPOFF}.jar"
		rmdir "${SINGLE}/${DROPOFF}/"
                echo "Download of snapshot ${DROPOFF} jar failed, no such version or other error"
                exit 1
            fi
            if [[ ! -f ${SINGLE}/${DROPOFF}/${DROPOFF}.json ]]; then
                wget -O "${SINGLE}/${DROPOFF}/${DROPOFF}.json" http://s3.amazonaws.com/Minecraft.Download/versions/${DROPOFF}/${DROPOFF}.json
                retval=$?
            fi
            if [[ $retval != 0 ]]; then
                rm "${SINGLE}/${DROPOFF}/${DROPOFF}.json"
                echo "Download of json failed, no such version or other error"
                exit 1
            fi
			# Plainly, this isn't correct dropoff point any more, but then, where is?
            wget -O ${SERVER}/snapshot_server_${DROPOFF}.jar http://s3.amazonaws.com/Minecraft.Download/versions/${DROPOFF}/minecraft_server.${DROPOFF}.jar

		;;
##################
# New (2018) snapshot sequences
##################
        18w19[a-l_]|18w[2-4][0-9][a-l_]|18w5[0-3][a-l_]|19w[0-4][0-9][a-l_]|19w5[0-3][a-l_]|2[0-9]w[0-4][0-9][a-l_]|2[0-9]w5[0-3][a-l_]) # changed because of version download changes
            SINGLE="${MCBase}/versions" # A new home for the release
            SERVER="${MCBase}/server/stash" # hmm? Does this remain the same?
            if [[ ! -d ${SINGLE}/${DROPOFF} ]]; then
			    mkdir -p "${SINGLE}/${DROPOFF}"  # catch the "no .minecraft/versions dir" error
            fi
            if [[ ! -f ${SINGLE}/${DROPOFF}/${DROPOFF}.jar ]]; then
# this is where we need to insert the call to FetchMinecraftManifest et al.
                wget -O "${SINGLE}/${DROPOFF}/${DROPOFF}.jar" http://s3.amazonaws.com/Minecraft.Download/versions/${DROPOFF}/${DROPOFF}.jar
                retval=$?
            fi
            if [[ $retval != 0 ]]; then
                rm "${SINGLE}/${DROPOFF}/${DROPOFF}.jar"
		rmdir "${SINGLE}/${DROPOFF}/"
                echo "Download of snapshot ${DROPOFF} jar failed, no such version or other error"
                exit 1
            fi
            if [[ ! -f ${SINGLE}/${DROPOFF}/${DROPOFF}.json ]]; then
                wget -O "${SINGLE}/${DROPOFF}/${DROPOFF}.json" http://s3.amazonaws.com/Minecraft.Download/versions/${DROPOFF}/${DROPOFF}.json
                retval=$?
            fi
            if [[ $retval != 0 ]]; then
                rm "${SINGLE}/${DROPOFF}/${DROPOFF}.json"
                echo "Download of json failed, no such version or other error"
                exit 1
            fi
			# Plainly, this isn't correct dropoff point any more, but then, where is?
            wget -O ${SERVER}/snapshot_server_${DROPOFF}.jar http://s3.amazonaws.com/Minecraft.Download/versions/${DROPOFF}/minecraft_server.${DROPOFF}.jar

		;;
	
##################
# These options to -f download various launchers, make sure we don't overwrite.
##################
        launcher|default|vanilla) # default launcher, should we call this default instead of launcher?
            wget -O ${MCBase}/bin/minecraft-launcher.jar https://s3.amazonaws.com/Minecraft.Download/launcher/Minecraft.jar
            ;;
#        devlauncher) # development launcher, which may need to be removed as it has been moved to the default
#            wget -O ${MCBase}/MinecraftDev.jar https://s3.amazonaws.com/Minecraft.Download/launcher/MinecraftDev.jar
#            ;;
        newlauncher) # new default GUI launcher
            wget -O ${MCBase}/bin/Minecraft-GUI-launcher.tar.gz https://launcher.mojang.com/download/Minecraft.tar.gz
            retval=$?
            if [[ $retval != 0 ]]; then
                # whoops, barfed.
                rm ${MCBase}/bin/Minecraft-GUI-launcher.tar.gz
                echo "${ME}: Fetch of new minecraft launcher tarball failed!"
                exit 1
            fi
            # Now we extract it in the correct place, used to be ${MCHOME}
            pushd "${NEWSINGLE}"
            # peel correct CURRENT version, I need to back the launcher folder up.
            PREVVER=$(grep "Launcher core version:" "${MCBASE}/launcher_log.txt" | cut -c85-93)
            # TODO: This will error if it doesn't already exist, i.e. brand new install of launcher
            # QUESTION: what if we already have the newest version?
            mv "minecraft-launcher" "minecraft-launcher-${PREVVER}"
            tar xvf "${MCBase}/bin/Minecraft-GUI-launcher.tar.gz" # TODO: Check retval! We could run out of room without knowing it.
            popd
            ;;
        atl) # Only true for Linux, at least currently. Windows has an exe, Mac has an app.
            if [[ ! -d ${ATLauncherBase} ]]; then
                mkdir ${ATLauncherBase}
                # TODO: If this fails, we have bigger problems
            fi
            wget -O ${ATLauncherBase}/ATLauncher.jar https://www.atlauncher.com/download/jar
            ;;
        ftb) # Patching in support for FTB_Launcher, one of the few to need a different root.
            if [[ ! -d ${FTBBase} ]]; then
                mkdir ${FTBBase}
                # TODO: If this fails, we have bigger problems
            fi
            # TODO: correct this for each version, scrape webpage?
            # NB: launcher updates itself, and there's now a new version, not yet compat with Linux as of 2015
#            wget -O ${FTBBase}/FTB_Loader.jar "http://www.creeperrepo.net/direct/FTB2/697ef1c4d2cb0eddfbf53c3eceba4889/launcher%5EFTB_Launcher.jar"
            wget -O ${FTBBase}/FTB_Loader.jar "http://ftb.cursecdn.com/FTB2/launcher/FTB_Launcher.jar"
            ;;
        magic) # another non-default launcher
            wget -O ${MCBase}/bin/MagicLauncher-1.0.0.jar http://magiclauncher.com/download.php?f=MagicLauncher_1.0.0.jar
            ;;
        ftba) # Patching in support for FTB_Launcher, one of the few to need a different root.
            if [[ ! -d ${FTBBaseApp} ]]; then
                mkdir ${FTBBaseApp}
                # TODO: If this fails, we have bigger problems
            fi
            # TODO: correct this for each version, scrape webpage?
            # NB: launcher updates itself, how do we download latest?
            wget -O ${FTBBaseApp}/FTBA_unix_1_0_8.sh "https://apps.modpacks.ch/FTBApp/release/1.0.8/FTBA_unix_1_0_8.sh"
            ;;
        magic) # another non-default launcher
            wget -O ${MCBase}/bin/MagicLauncher-1.0.0.jar http://magiclauncher.com/download.php?f=MagicLauncher_1.0.0.jar
            ;;
# it seems MultiMC is arch-dependent. I now have a download link. Woo hoo!
# TODO: check if dir exists, create if it doesn't
        multi) # a kept-up-to-date launcher
            pushd "${MCBase}"
            if [[ ! -d ${MultiMCBase} ]]; then
                mkdir "${MultiMCBase}" # If this fails, we've got bigger problems
            fi
            # First, grab the arch
            MYARCH=$(arch)
            case ${MYARCH} in
              x86_64)
                DL_ARCH=lin64
              ;;
              i686)
                 DL_ARCH=lin32
              ;;
            esac
            # go download it (TODO: we need to check for failures to download)
            wget -O ${MultiMCBase}/mmc-stable-${DL_ARCH}.tar.gz "https://files.multimc.org/downloads/mmc-stable-${DL_ARCH}.tar.gz"
            # Now we extract it to somewhere
            tar xvf ${MultiMCBase}/mmc-stable-${DL_ARCH}.tar.gz
            unset DL_ARCH
            popd
          ;; # End of multi) section
        technic) # Patching in support for Technic_Loader, one of the few to need a different root.
            if [[ ! -d ${TechnicBase} ]]; then
                mkdir ${TechnicBase}
                # TODO: If this fails, we have bigger problems
            fi
            # TODO: correct this for each version, scrape webpage?
# Previous link at "http://mirror.technicpack.net/launcher/221/TechnicLauncher.jar" 
            wget -O ${TechnicBase}/TechnicLauncher.jar "http://launcher.technicpack.net/launcher4/360/TechnicLauncher.jar"
            ;;
        terra) # Patching in support for TerraFirmaCraft, one of the few to need a different root.
            # TODO: Remove this really soon, as TerraFirmaCraft now uses the default launcher
            if [[ ! -d ${TerraFirmaBase} ]]; then
                mkdir ${TerraFirmaBase}
                # TODO: If this fails, we have bigger problems
            fi
            pushd "${TerraFirmaBase}" # Don't forget to pop again
            wget -O ${TerraFirmaBase}/TFCLauncher.zip "http://terrafirmacraft.com/files/TFCLauncher.zip"
            # Now we need to unzip it, as it's not just a jar... now it comes with a Start.sh/bat
            unzip TFCLauncher.zip
            popd
            ;;
#################### Obsolete entries ####################
        aether) # This has different values of launcher home for Windows/OSX. This is one of the few to need a different root.
            # Incidentally, this possibly doesn't take care of the rest of the files
            # TODO: we seriously need to update this from classic to Aether II
            if [[ ! -d ${AetherLauncherBase} ]]; then
                mkdir "${AetherLauncherBase}"
                # TODO: If this fails, we have bigger problems
            fi
            wget -O "${AetherLauncherBase}/aether-launcher-bootstrap.jar" https://files.gildedgames.com/minecraft/aether/dist/launcher/aether-launcher-bootstrap.jar
            ;;
#        bukkitrb) # craftbukkit server, disabled while DCMA claim works its way out
#            ParseLatestRB
#            wget -O ${MCBase}/server/craftbukkit-${BUKKITVER}.jar http://dl.bukkit.org/latest-rb/craftbukkit.jar
#            ;;
#        bukkitbeta) 
#            ParseLatestBeta
#            wget -O ${MCBase}/server/craftbukkit-beta.jar http://cbukk.it/craftbukkit-beta.jar
#            ;;
        ancient) # Put back in the ability to download the original launcher, though why you
                 # might want this is beyond me
            wget -O ${MCBase}/original-minecraft-launcher.jar https://s3.amazonaws.com/MinecraftDownload/launcher/minecraft.jar
            echo "This is a very old launcher, it may not work in the way you want"
            ;;
        craft) # Patching in support for craftlauncher, one of the few to need a different root.
            if [[ ! -d ${CLBase} ]]; then
                mkdir ${CLBASE}
                # TODO: If this fails, we have bigger problems
            fi
            wget -O ${CLBase}/craftlandloader.jar "http://craftland.org/mod/craftlandloader.jar"
            # TODO: how the heck do we execute this? we need loader.jar, not craftlandloader.jar
            echo "Please execute 'java -jar '${CLBase}/craftlandloader.jar"
            echo "This will prepare craftland for execution later, with ${ME} -l craft"
            ;;
        digiex) # non-default launcher, definitely ancient
            wget -O ${MCBase}/bin/digiex-mclauncher.jar http://minecraft.digiex.org/dlfiles/mclauncher.jar
            ;;
#        server) echo "can't (yet) fetch server on its own"
#            exit 1
#            ;;
        mvc) # Minecraft Version Changer, now obsolete (1.6.2-prerelease), unsupported and deprecated
            wget -O ${MCBase}/bin/MVC.jar "http://mvc.tunkdesign.com/cgi-bin/load.cgi?dljar/MVC.jar"
            ;;
        skmc) # non-default launcher, we should probably back up the last version
            # TODO: Must do the backup last launcher thing for all the rest of them
            mv "${MCBase}/bin/SKMCLauncher.jar" "${MCBase}/bin/SKMCLauncher-last.jar"
            wget -O ${MCBase}/bin/SKMCLauncher.jar http://build.sk89q.com/job/SKMCLauncher/lastSuccessfulBuild/artifact/target/SKMCLauncher.jar
            ;;
        *) echo "Can't recognise $1 (yet). minecrafty -f help for stuff I can fetch."
            exit 1
            ;;
    esac
}

# We have to start minecraft with something, choose sane defaults
# BUGS: default launcher only works up until 1.14.3
DefaultSettings() {
        # We should perhaps unset ${MEM}? Problem is, this is called before Set*Launch is.
        CMDARG="-jar ${MCBase}/bin/minecraft-launcher.jar"
        CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

# New set up for new GUI launcher, not the same as the java launcher
NewDefaultSettings() {
        CMDARG=""
        CMDRUN="${NEWCMDRUN}"
        CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

# New set up for new GUI launcher, not the same as the java launcher
SetNewFTBLauncher() {
        CMDARG=""
        CMDRUN="${FTBNEWCMDRUN}"
        CMD="${CMDRUN} --workDir ${FTBNewBase} ${CMDOPT} ${CMDARG}"
}

SetArchaicLauncher() {
        CMDARG="-cp ${MCBase}/bin/original-minecraft-launcher.jar net.minecraft.LauncherFrame"
        CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

# Start commands using padsp (provides a "fake" /dev/dsp for programs that really need it)
SetPADSP() {
    PARUN="padsp "
    CMDRUN="$PARUN $JAVARUN"
    CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

# Start commands stopping pulseaudio altogether for programs that can only talk to alsa
SetPAPause() {
    # This command isn't always the same name
    if which pasuspend >/dev/null; then 
      PARUN="pasuspend -- "
    elif which pasuspender >/dev/null; then
      PARUN="pasuspender -- "
    fi
    CMDRUN="$PARUN $JAVARUN"
    CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

# Starts $CMDRUN on desktop
SetDesktop() {
    if [[ -z $1 ]]; then
        return
        # barf
    fi
    MYDESK=$1
}

# Only of any use for running the vanilla launcher, no good for TerraFirma
SetTinyMemory() {
    MEM="-Xmx256M -Xms128M"
    CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

# Only of any use for running the vanilla or TerraFirma launcher
SetSmallMemory() {
    MEM="-Xmx512M -Xms512M"
    CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

# Only of any use for running the vanilla or TerraFirma launcher
SetMoreMemory() {
    MEM="-Xmx1024M -Xms512M"
    CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

# Only of any use for running the vanilla or TerraFirma launcher
# Also only any good on 64-bit systems.
# TODO: how do we do that, again?
SetEnormousMemory() {
    # Only do this if ${HOSTTYPE} isn't i686
    if [[ ${HOSTTYPE} = "i686" ]]; then
        # do we do nothing and simply refuse, or do we warn the user?
        echo "Unable to allocate more than 1.5Gb on a 32-bit system"
        echo "setting memory to 1Gb"
        # call that procedure instead
        SetMoreMemory
    else
        MEM="-Xmx2048M -Xms1024M"
        CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
    fi
}

# Choose which monitor to run minecraft on, and therefore change refresh rate, brightness/gamma.
SetMonitor() {
# TODO: correctly apply this to -g
    MON=$(( $1 * 2 )) #MonitorOffset
#    if ${GAMMA} set, then rerun SetGamma
    if [[ ${GAMMA} ]]; then 
        SetGamma
    fi
}

# Show the current program version
ShowVersionString() {
    echo "$ME: ${VERSION}.${MINOR}.${PATCH}"
    unset CMD
# We need to exit
}

# Now rendered irrelevant
SetDevLauncher() {
        CMDARG="-jar ${MCBase}/MinecraftDev.jar"
        CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
#        FetchGamma
#        FetchBright
}

# Set values up to launch MagicLauncher
SetMagicLauncher() {
    CMDRUN="$PARUN $JAVARUN -Xincgc"
    CMDARG="-jar ${MCBase}/bin/MagicLauncher_1.0.0.jar"
    CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

# Set values up to launch MultiMC
SetMultiLauncher() {
    if [[ -n ${MEM} ]]; then
        echo -e "${ME}: ${MEM} (from -T/-B/-E) is being ignored. FTBLauncher sets memory\n           for Minecraft from its own settings"
    fi
    MYDIR="${MultiMCBase}"
    CMDRUN="${MultiMCBase}/MultiMC"
    CMDARG=""
    CMD="${CMDRUN} ${CMDOPT} ${CMDARG}"
}

# !! This executes the craftland loader, which requires an INSTALLED craftland
SetCraftLauncher() {
    CMDRUN="$PARUN $JAVARUN"
    CMDARG="-Xincgc -jar ${CLBase}/loader.jar"
    CMD="${CMDRUN} ${CMDOPT} ${CMDARG}"
}

# Set values up to launch digiex's mclauncher, now obsolete, unsupported and deprecated
SetDigiLauncher() {
    CMDRUN="$PARUN $JAVARUN -Xincgc"
    CMDARG="-jar ${MCBase}/bin/digiex-mclauncher.jar"
    CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

# Set values up to launch SKMClauncher, now obsolete, unsupported and deprecated
SetSKMCLauncher() {
#    CMDARG="-jar ${MCBase}/bin/SKMCLauncher-3.1.7-SNAPSHOT.jar"
    if [[ -n ${MEM} ]]; then
        echo "${ME}: ${MEM} (from -T/-B/-E) is being ignored. skmclauncher sets memory\n           for Minecraft from its own settings"
    fi
# We don't need ${MEM} here, as SKMClauncher allows for setting specific memory when starting minecraft.
    CMDRUN="$PARUN $JAVARUN -Xincgc"
    CMDARG="-jar ${MCBase}/bin/SKMCLauncher.jar"
    CMD="${CMDRUN} ${CMDOPT} ${CMDARG}"
}

# Set values up to launch FTB
SetFTBLauncher() {
    if [[ -n ${MEM} ]]; then
        echo "${ME}: ${MEM} (from -T/-B/-E) is being ignored. FTBLauncher sets memory\n           for Minecraft from its own settings"
    fi
    MYDIR="${FTBBase}"
    CMDRUN="$PARUN $JAVARUN -Xincgc"
    CMDARG="-jar ${FTBBase}/FTB_Launcher.jar"
    CMD="${CMDRUN} ${CMDOPT} ${CMDARG}"
}

# Set values up to launch FTB App, new kid on the block
SetFTBAppLauncher() {
    if [[ -n ${MEM} ]]; then
        echo "${ME}: ${MEM} (from -T/-B/-E) is being ignored. FTBAppLauncher sets memory\n           for Minecraft from its own settings"
    fi
    MYDIR="${FTBAppBase}"
    #CMDRUN="$PARUN $JAVARUN -Xincgc"
    CMDRUN="$PARUN ${FTBAppBase}/FTBApp"
    CMDARG=""
    #CMDARG="-jar ${FTBAppBase}/FTB_Launcher.jar"
    CMD="${CMDRUN} ${CMDOPT} ${CMDARG}"
}

# Set values up to launch TechnicLauncher
SetTechLauncher() {
    if [[ -n ${MEM} ]]; then
        echo "${ME}: ${MEM} (from -T/-B/-E) is being ignored. TechnicLauncher sets memory\n           for Minecraft from its own settings"
    fi
    MYDIR="${TechnicBase}"
    CMDRUN="$PARUN $JAVARUN -Xincgc"
    CMDARG="-jar ${TechnicBase}/TechnicLauncher.jar"
    CMD="${CMDRUN} ${CMDOPT} ${CMDARG}"
}

# Set values up to launch TerraFirma
SetTerraLauncher() {
    # For some reason, this launcher needs more memory than just 256Mb
    # TODO: update this so it starts with  memory settings from -TSBE, strip out T
    MYDIR="${TerraFirmaBase}"
    MEM=${MEM:-"-Xms512M -Xmx1024M"}
    CMDRUN="$PARUN $JAVARUN -Xincgc"
    CMDARG="-jar ${TerraFirmaBase}/TFCLauncher.jar"
    CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

# runs mvc, a Minecraft version patcher
SetMVCLauncher() {
    CMDRUN="$PARUN $JAVARUN -Xincgc"
    CMDARG="-jar ${MCBase}/bin/MVC.jar"
    CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

# runs ATLauncher, a Minecraft version patcher
SetATLauncher() {
    CMDRUN="$PARUN $JAVARUN -Xincgc"
    CMDARG="-jar ${ATLauncherBase}/ATLauncher.jar"
    CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

# runs Aether Launcher (for Aether II, NOT Aether Classic)
# TODO: there's an anomaly here for Aether, I should resolve it
# 20180301 Aether-launcher-bootstrap no longer works
SetAetherLauncher() {
    CMDRUN="$PARUN $JAVARUN -Xincgc"
    CMDARG="-jar ${AetherLauncherBase}/aether-launcher-bootstrap.jar"
    CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

# This fetches commandline args, parses them, then fires off relevant sections of FUNCARRAY[$ONECMD] with $OPTARG
GetOpts() {
    while getopts ${GETOPTS} ONECMD; do
        case ${ONECMD} in "?"|"h")
# handle the getopts error here. This stops the script on an incorrect switch.
# An alternative would have been to check ${OPTARG} against "-?"|"-h" in a case switch specifically for the help switch
            Help
            unset CMD
            ;;
        esac

#        fi
        for (( t=0; t<"${#GETOPTARRAY[@]}"; t++ )); do
            if [[ "${ONECMD}:" == "${GETOPTARRAY[$t]}" ]]; then 
                ONECMD="${ONECMD}:"
            fi
        done
        ${FUNCARRAY[$ONECMD]} ${OPTARG}
    done
}

# Creates the associative command array, using LOA[0] and LOA[1]
StuffCommands() {
for (( c=0; c<${#LOA[@]}; c+=3 )); do
  CMDARRAY[${LOA[c]}]=${LOA[c+1]}
done

}

#### End of functions, now let's create our arrays ####

StuffGetOpts
StuffFetchOpts
StuffLaunchOpts
StuffCommands

# Stuffed arrays? Now let's do something with them
case $1 in "-?"|"-h") Help
exit 0
;;
esac
DefaultSettings
GetOpts $@

if [[ ${CMD+defined} ]]; then
  RunMC
  # Okay, minecraft finished (for good or bad), let's set screen back to how it was
  # TODO: how to fold these calls into a single xrandr call
  if [[ ${GAMMA} ]]; then
    ResetGamma
  fi
  if [[ ${BRIGHT} ]]; then
    ResetBright
  fi
  if [[ ${Refresh} ]]; then
    ResetRefresh
  fi
  if [[ ${MYRES} ]]; then
    ResetResolution
  fi
fi
exit $retval

# vim:expandtab:ts=4
