#!/bin/bash
# 0.0: Initial three-liner, set gamma to 0.6, run minecraft, put gamma back.
# 0.1: wrap things a bit
# 0.2: add in switches -launcher, -server181
# 0.3: Add functions for help, RunMe, change switches to short form -s/-l
# 0.4: put in host detection, so CRT outputs get detected on a per-host basis.
# 0.5: Add in -g (gamma) switch, the -d (default) switch, and do switch parsing. Some of this came from RfcShow.
# 0.6: Add in function to find current gamma setting, needs work
# 0.7: Got rid of GetGamma, as it ended up as a one-liner.
# 0.8: Possible reinstatement as FetchGamma/GammaExit wrappers around $CMD
# 0.9: Split off gamma setting into its own routine. Should we getopt this program?
# 0.10: adding a -t (tiny) switch (takes up less memory) and an -e (enormous) switch
#       Also tweaked RunMe to RunMC
# 0.11: reset gamma somewhat so it only fires up if we specify a gamma 
# 0.12: Tidied up comments, commented out a host-specific section
# 0.13: Initial try at hacking in server support, change the s parameter to accept a filename
#     : This would (of course) fail in the case of an empty -g AND -s (whether empty or not)
#     : or vice versa: empty -s with -g parameter.
#     : Other problems apply if I specify -s at all, I won't need -l or -g anyhow
# 0.14: I need to add a correction for gamma at exit of mc.
# 0.15: Added another launcher to the list of launchers I can execute (SKMCLauncher, by sk89q)
#     : added help line for SKMC, tweaked help to say where launchers needed to be)
# 0.16: added -m option to select which monitor I want gamma raised on.
#     : Only problem with this, is it's often different from the monitor I need to correct refresh on.
# 0.16a: added lines to Help describing -c
# 0.16b: changed -c to -r (refreshrate)
# 0.17: added an array to populate ${GETOPTS} with, so I can keep Help() and ParseOpts() in sync.
#     : ParseOpts isn't made yet.
# 0.18: Complete rewrite of options parsing. Well on the way to being actually FINISHED!
#     : GammaExit renamed as ResetGamma, I should rename RefreshExit too.
# 0.19: All done, I hope. One buglet found so far, order of options matters for -m and -g
#     : Now executing SetGamma from RunMC. Only the one bugette left, skmclauncher exits and relaunches,
#     : so the ResetGamma happens when it shouldn't happen until the script ends. Refresh rate's not getting reset.
# 0.20: Fixed the order of -g/-m so it doesn't matter.
#     : realised that BOTH monitors are getting their refresh rate resynched to "Preferred"
#     : In addition, if I choose to reset monitors independently, I'm going to have an interesting problem separating
#     : their framerates and gammas from each other. I've also discovered a "brightness" setting.
# 0.21: Rejiggered three of the switches so I can reuse their lowercase variants as separate switches
#     : Replaced MYVAR with ONECMD, added Bright_ functions and a switch. Added -? handling.
#     : Thought of something. SKMCLauncher does its own memory handling, so I should ignore -BET if I have -o
# 0.22: Provided a OSS switch (-O), which provides $CMDRUN as "padsp java". Will it propagate past launchers? Don't know.
# 0.23: Add proper NEW server support. Consolidate on .minecraft/server as the new home.
# 0.24: Implement the xrandr as one command, not separate commands.
# 0.25: Added in the fetchminecraft.sh script whole.
# 0.26: Added rudimentary MinecraftLauncher support... it just launches ML, nothing else.

VERSION=0
MINOR=26
PATCH=
ME=$(basename $0)
# Default gamma brightness of game
GAMMADEF=0.6
# Default memory assign (whatever the java executable assigns)
MEM=" "
# set this to blank too
CMDOPT=" "
# TODO: Fix the pulseaudio dependency
#CMDRUN="padsp java"
CMDRUN="java"
MCBase="${HOME}/.minecraft"

# Mandatory to declare an associative array
declare -A FUNCARRAY

# New array for filling GETOPTS
GOA=(
"h" "provides this help screen (-? gets here as well)" Help
"T" "assign minimal memory to the client" SetTinyMemory
"B" "assign more memory to the client" SetMoreMemory
"E" "assign lots more memory to the client" SetEnormousMemory
"O" "create OSS-like pulseaudio device" SetPADSP
"b:" "n.n: set the brightness. If unset, $BRIGHTDEF is used. 0.7 darker, 1.2 lighter" BrightInit
"g:" "n.n: set the gamma offset. If unset, $GAMMADEF is used. 0.7 lighter, 1.2 darker" GammaInit
"m:" "select monitor to apply gamma correction to" SetMonitor
"r:" "nn.n: set a valid refresh rate for the second monitor, as minecraft has a habit of setting this to the recommended value instead of the value used originally." SetRefresh
"a" "starts Magic Launcher program (must be in $(dirname $0))" SetMagicLauncher
"l" "starts the digiex mclauncher program (must be in $(dirname $0))" SetDigiLauncher
"o" "starts the SKMClauncher program (must be in $(dirname $0))" SetSKMCLauncher
"v" "show version string" ShowVersionString
"s:" "starts the latest server, supply a filename" ServerRun
"f:" "retrieves version of minecraft.jar from remote host, supply a version number (i.e. 1.3.2 or 12w49a)" FetchMinecraft
)

# Entries that aren't used at the moment
GONA=(
)

# This routine "stuffs" values into GETOPTS for later use by the getopts routine
StuffGetOpts() {
# Apparently bash now supports ( [string]="value" ) arrays.
	for (( i=0, p=0; i< ${#GOA[@]}; i+=3, p++ )); do
		GETOPTARRAY+=( "${GOA[i]}" )
		GETOPTS="${GETOPTS}${GOA[i]}"
		HELPOPTS+=( "${GOA[i+1]}" )
		FUNCARRAY+=( ["${GETOPTARRAY[p]}"]="${GOA[i+2]}" )
	done

}

Help() {
	echo "$ME: Help screen"
	echo "$ME -${GETOPTS}"
	for (( i=0, p=0; p<${#GETOPTARRAY[@]}; i+=3, p++ )); do
		echo "-${GETOPTARRAY[p]}:    ${GOA[i+1]}"
	done
	unset CMD
#	break  (seems I don't need it)
}

# Hopefully sets brightness, separate from the gamma
BrightInit() {
	if [[ -z $MON ]]; then MON=0; fi # set a default if one hasn't been set already
	if [[ ${1} == ${1//[^[:digit:]\.]/} ]]; then
		if [[ ! $BRIGHT ]]; then # Only set if it hasn't already been
			BRIGHT=${1:-${BRIGHTDEF}}  # This looks good for my screen, might not be useful for anyone else
		else
			echo "Brightness has been set to $BRIGHT already, ignoring $1"
		fi
	else
# Could get tangled up with next -belts: parameter if g is empty
	    echo "I can't set brightness to ${1}! Try using a number such as 0.7, .7 or 1"
	fi
}

FetchBright() {
# TODO: I should put xrandr output into a var, as it's used multiple places
# This routine fetches available outputs that are plugged in
	BARRAY=( $(xrandr --verbose | awk 'NR == 1 { next }; match($0, /^[[:alnum:]\-]+/) { output = substr($0,RSTART, RLENGTH) }; /Brightness:/ { print output, $2 }') )
}

# This'll brighten/darken things a bit - only thing that needs changing will be the output monitor
SetBright() {
	xrandr --output ${BARRAY[${MON}]} --brightness "${BRIGHT}"
}

ResetBright() {
# TODO: Remove host dependency, pretty hard to do without having X involved anyhow.
# Now we put the brightness back to normal, on the first screen
	BRIGHT=${BARRAY[$MON+1]}
#	xrandr --output ${BARRAY[$MON]} --brightness ${BARRAY[$MON+1]}
	SetBright # Might as well reuse the same function.
}

GammaInit() {
	if [[ -z $MON ]]; then MON=0; fi # set a default if one hasn't been set already
	if [[ ${1} == ${1//[^[:digit:]\.]/} ]]; then
		if [[ ! $GAMMA ]]; then # Only set if it hasn't already been
			GAMMA=${1:-${GAMMADEF}}  # This looks good for my screen, might not be useful for anyone else
		else
			echo "Gamma has been set to $GAMMA already, ignoring $1"
		fi
	else
# Could get tangled up with next -belts: parameter if g is empty
	    echo "I can't set your gamma to ${1}! Try using a number such as 0.7, .7 or 1"
	fi
}

FetchGamma() {
# TODO: I should put xrandr output into a var, as it's used multiple places
# This routine fetches available outputs that are plugged in
	GARRAY=( $(xrandr --verbose | awk 'NR == 1 { next }; match($0, /^[[:alnum:]\-]+/) { output = substr($0,RSTART, RLENGTH) }; /Gamma:/ { print output, $2 }') )
}

# This is meant to fetch the Refresh rates for each connected screen
FetchRefresh() {
# No idea what to tack onto the end, except that I need to look for Connected,
# then Current, and two lines after, the refresh rate that I need.
# I have to create entries for (possibly multiple) screens
	#
  RARRAY=( $(xrandr --verbose ) )
}

ResetGamma() {
# TODO: Remove host dependency, pretty hard to do without having X involved anyhow.
# Now we put the brightness back to normal, on the first screen
	GAMMA=${GARRAY[$MON+1]}
echo "Inside ResetGamma, with ${GAMMA}"
#	xrandr --output ${GARRAY[$MON]} --gamma ${GARRAY[$MON+1]}
	SetGamma # Might as well reuse the same function.
}

ResetRefresh() {
# TODO: It seems if the gamma never got loaded, then this function always fails
#   if [[ ${GARRAY[2]} && $HOSTNAME == fatty ]]; then
#    xrandr --output ${GARRAY[$MON]} --rate ${Refresh} --mode 1024x768
# The game had a habit of resetting the other screen to 60Hz. Not nice. Only set on fatty for now
    xrandr --output ${GARRAY[2]} --rate ${Refresh} --mode 1024x768
#    fi
}

# This'll brighten/darken things a bit - only thing that needs changing will be the output monitor
SetGamma() {
	xrandr --output ${GARRAY[${MON}]} --gamma "${GAMMA}:${GAMMA}:${GAMMA}"
}

# Central one shot run engine.
RunMC() {
# TODO: make this not so $HOME-centric
# TODO: merge these if they're both set.
#	pushd $HOME/bin
	pushd ${MCBase}

	if [[ ${GAMMA} ]]; then
		FetchGamma
		SetGamma $GAMMA
	fi
	if [[ ${BRIGHT} ]]; then
		FetchBright
		SetBright $BRIGHT
	fi
# Run the command we got earlier, finishing by peeling the return value
	${CMD}
	retval=$?
	popd
}

ServerRun() {
# TODO: add the new server location of .minecraft/server/whatever.jar
# Wrap with DoesFileExist for ${OPTARG}, don't forget the empty case.
    if [[ ${1} == "default" ]]; then
	    ServerName=minecraft_server.jar
	else
	    ServerName=${1}
	fi

    ServerPlace="${MCBase}/server"
	echo "ServerName now set to ${ServerName}"
	if [[ -f ${ServerPlace}/${ServerName} ]]; then
		CMD="java -Xmx1024M -Xincgc -jar ${ServerPlace}/${ServerName}"
	else
		echo "We don't have the $1 server here, please download from www.minecraft.net"
		retval=1 #bad doggie, bad, there's no point in continuing any further
		echo "Instead, here's a default launcher"
	fi
}

FetchMinecraft() {
	# Pulled this in from fetchminecraft.sh at version 0.1.9
	# ver 0.0.0: initial cut
	# 0.0.1: finally got the script fetching the client and server
	#      : now I just need to toggle -c/-s for fetching just the client or server
	# 0.0.2: checked if we succeeded in fetching the file
	# 0.0.3: split off the two patterns, as they create two slightly different names
	#      : i.e.  final_$VER or snapshot_$VER.  Also shifted the initial cd outside the case switch.
	# 0.1.1: no idea why I upgraded to this number, but hey.
	# 0.1.9: folded this directly into minecrafty, also added another two years of snapshots

	# $1 ought to be something like 12w32a or 1.3.2, as it'll get used to name save files.

	# ! BFW !  These directories had better exist, especially the second one.
	SINGLE="$HOME/.minecraft/bin"
	SERVER="$HOME/.minecraft/server/stash"
	if [[ ! -d $SINGLE ]]; then
		echo "Can't save, you don't seem to have a valid minecraft installation!"
		exit 1
	fi
	if [[ ! -d $SERVER ]]; then
		echo "Can't save, please create a .minecraft/server/stash directory!"
		exit 1
	fi

	DROPOFF=$1
	if [[ -z $DROPOFF ]]; then
		echo "Can't save something I don't know the name of!"
		exit 1
	fi
	# Okay, we have a $1, do we cardinalise it?
	# Not yet, as I don't know how to match it up against certain patterns.
	# somepattern is 1[12]w[12345][0-9][a-f], somepattern2 is [12].[0-9].[0-9]
	pushd "$SINGLE"
	case $DROPOFF in 
		1[1234]w[12345][0-9][a-f]) # snapshot version
			if [[ ! -f snapshot_${DROPOFF}.jar ]]; then # only fetch if we haven't got it already
				wget -O snapshot_$DROPOFF.jar http://assets.minecraft.net/${DROPOFF//\./_}/minecraft.jar
				retval=$?
			fi
			# We need an error check. If wget returns a 1, then we erase the file we just created.
			if [[ $retval != 0 ]]; then
				rm snapshot_${DROPOFF}.jar
				echo "Download failed, no such version or other error"
				exit 1
			fi
			# otherwise, it succeeded, we might as well go get the server file
			cd "$SERVER"
			wget -O snapshot_server_$DROPOFF.jar http://assets.minecraft.net/${DROPOFF//\./_}/minecraft_server.jar
		;;
		[12].[0-9].[0-9]|[12].[0-9]) # final version
			if [[ ! -f final_${DROPOFF}.jar ]]; then
				wget -O final_$DROPOFF.jar http://assets.minecraft.net/${DROPOFF//\./_}/minecraft.jar
				retval=$?
			fi
			if [[ $retval != 0 ]]; then
				rm final_${DROPOFF}.jar
				echo "Download failed, no such version or other error"
				exit 1
			fi
			cd "$SERVER"
			wget -O final_server_$DROPOFF.jar http://assets.minecraft.net/${DROPOFF//\./_}/minecraft_server.jar
		;;
		*) echo "Can't recognise that (yet), try 12w34a or 1.3.2"
			exit 1
			;;
	esac
	popd
}

DefaultSettings() {
		CMDARG="-cp ${HOME}/bin/minecraft-launcher.jar net.minecraft.LauncherFrame"
		CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
#	    FetchGamma
#	    FetchBright
}

SetPADSP() {
	CMDRUN="padsp java"
	CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

SetEnormousMemory() {
	MEM="-Xmx2048M -Xms1024M"
	CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

SetMoreMemory() {
	MEM="-Xmx1024M -Xms1024M"
	CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

SetTinyMemory() {
	MEM="-Xmx512M -Xms512M"
	CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

SetMonitor() {
# TODO: correctly apply this to -g
	MON=$(( $1 * 2 )) #MonitorOffset
#	if ${GAMMA} set, then rerun SetGamma
	if [[ ${GAMMA} ]]; then 
		SetGamma
	fi
}

ShowVersionString() {
	echo "$ME: ${VERSION}.${MINOR}.${PATCH}"
	unset CMD
# We need to exit
	break 
}

SetMagicLauncher() {
# queue this up so it runs the MagicLauncher.
# TODO: fix this so it's not padsp-specific
	CMDRUN="padsp java -Xincgc"
	CMDARG="-jar ${MCBase}/bin/MagicLauncher_1.0.0.jar"
	CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

SetDigiLauncher() {
# runs mclauncher
# TODO: fix this so it's not padsp-specific
	CMDRUN="padsp java -Xincgc"
	CMDARG="-jar ${MCBase}/bin/mclauncher.jar"
	CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

SetSKMCLauncher() {
# runs SKMClauncher
# TODO: fix this so it's not padsp-specific
# We don't need ${MEM} here, as SKMClauncher allows for setting specific memory when starting minecraft.
	CMDRUN="padsp java -Xincgc"
	CMDARG="-jar ${MCBase}/bin/SKMCLauncher.jar"
	MEM=" "
	CMD="${CMDRUN} ${CMDOPT} ${MEM} ${CMDARG}"
}

SetRefresh() {
	# We need this so we can reset the gamma or refresh rate later on.
	FetchGamma
	Refresh=$1
}

# This fetches commandline args, parses them, then fires off relevant sections of FUNCARRAY[$ONECMD] with $OPTARG
GetOpts() {
	while getopts ${GETOPTS} ONECMD; do
		if [[ "${ONECMD}" == "?" ]]; then
# handle the getopts error here. This stops the script on an incorrect switch.
# An alternative would have been to check ${OPTARG} against "-?"|"-h" in a case switch specifically for the help switch
			Help
			unset CMD
			break
		fi
		for (( t=0; t<"${#GETOPTARRAY[@]}"; t++ )); do
			if [[ "${ONECMD}:" == "${GETOPTARRAY[$t]}" ]]; then 
				ONECMD="${ONECMD}:"
			fi
		done
		${FUNCARRAY[$ONECMD]} ${OPTARG}
	done
}

StuffGetOpts
case $1 in "-?"|"-h") Help
exit 0
;;
esac
DefaultSettings
GetOpts $@

if [[ ${CMD+defined} ]]; then
  RunMC
  # TODO: how to fold these calls into a single xrandr call
  if [[ ${GAMMA} ]]; then
    ResetGamma
  fi
  if [[ ${BRIGHT} ]]; then
    ResetBright
  fi
  if [[ ${Refresh} ]]; then
    ResetRefresh
  fi
fi
exit $retval

